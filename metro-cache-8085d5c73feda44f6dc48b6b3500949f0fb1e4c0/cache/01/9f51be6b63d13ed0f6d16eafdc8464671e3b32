__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createReducer;

  var _lodash = _require(_dependencyMap[0], "lodash.isequal");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _reactNavigation = _require(_dependencyMap[1], "react-navigation");

  var _ActionConst = _require(_dependencyMap[2], "./ActionConst");

  var ActionConst = _interopRequireWildcard(_ActionConst);

  var _State = _require(_dependencyMap[3], "./State");

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function createReducer(navigationStore) {
    return function (state, action) {
      if (!navigationStore) {
        navigationStore = _require(_dependencyMap[4], './navigationStore').default;
      }

      var type = action.type,
          routeName = action.routeName;

      if (type === ActionConst.POP_TO) {
        var nextScene = '';
        var newState = state;
        var currentState = state;

        while (newState && nextScene !== routeName) {
          newState = navigationStore.getStateForAction(_reactNavigation.StackActions.pop(), currentState);

          if (newState) {
            nextScene = (0, _State.getActiveState)(newState).routeName;

            if ((0, _lodash2.default)(currentState, newState)) {
              console.warn("popTo called with an unknown routeName: " + routeName);
              break;
            }

            if (nextScene !== routeName) {
              currentState = newState;
            }
          }
        }

        return nextScene === routeName ? newState : state;
      }

      if (type === ActionConst.REPLACE) {
        var _newState = navigationStore.getStateForAction(_reactNavigation.NavigationActions.navigate({
          routeName: routeName,
          params: action.params
        }), state);

        var res = (0, _State.popPrevious)(_newState, routeName);
        return res;
      }

      return navigationStore.getStateForAction(action, state) || state;
    };
  }
});