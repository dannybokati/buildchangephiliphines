__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
  };

  var _react = _require(_dependencyMap[0], 'react');

  var _react2 = _interopRequireDefault(_react);

  var _localizedStrings = _require(_dependencyMap[1], 'localized-strings');

  var _localizedStrings2 = _interopRequireDefault(_localizedStrings);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var isReactComponent = function isReactComponent(value) {
    return _typeof(value.$$typeof) === 'symbol';
  };

  var placeholderRegex = /(\{[\d|\w]+\})/;

  _localizedStrings2.default.prototype.formatString = function (str) {
    for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      valuesForPlaceholders[_key - 1] = arguments[_key];
    }

    var hasObject = false;
    var res = (str || '').split(placeholderRegex).filter(function (textPart) {
      return !!textPart;
    }).map(function (textPart, index) {
      if (textPart.match(placeholderRegex)) {
        var matchedKey = textPart.slice(1, -1);
        var valueForPlaceholder = valuesForPlaceholders[matchedKey];

        if (valueForPlaceholder == undefined) {
          var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];

          if (valueFromObjectPlaceholder !== undefined) {
            valueForPlaceholder = valueFromObjectPlaceholder;
          } else {
            return valueForPlaceholder;
          }
        }

        if (isReactComponent(valueForPlaceholder)) {
          hasObject = true;
          return _react2.default.Children.toArray(valueForPlaceholder).map(function (component) {
            return _extends({}, component, {
              key: index.toString()
            });
          });
        }

        return valueForPlaceholder;
      }

      return textPart;
    });
    if (hasObject) return res;
    return res.join('');
  };

  exports.default = _localizedStrings2.default;
});