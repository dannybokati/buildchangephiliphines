__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var _require = _require2(_dependencyMap[0], 'react-native'),
      NativeModules = _require.NativeModules;

  var callbackNames = ['onPositive', 'onNegative', 'onNeutral', 'onAny', 'itemsCallback', 'itemsCallbackSingleChoice', 'itemsCallbackMultiChoice', 'showListener', 'cancelListener', 'dismissListener'];

  var DialogAndroid = function () {
    function DialogAndroid() {
      _classCallCheck(this, DialogAndroid);

      this.options = {};
    }

    _createClass(DialogAndroid, [{
      key: "set",
      value: function set(obj) {
        _extends(this.options, obj);
      }
    }, {
      key: "show",
      value: function show() {
        var finalOptions = _extends({}, this.options);

        var callbacks = {
          error: function error(err, op) {
            return console.error(err, op);
          }
        };
        callbackNames.forEach(function (cb) {
          if (cb in finalOptions) {
            callbacks[cb] = finalOptions[cb];
            finalOptions[cb] = true;
          }
        });

        if ('input' in finalOptions) {
          finalOptions.input = _extends({}, finalOptions.input);

          var inputCallback = finalOptions.input.callback || function (x) {
            return console.log(x);
          };

          finalOptions.input.callback = true;
          callbacks['input'] = inputCallback;
        }

        if ('itemsCallbackMultiChoice' in callbacks) {
          var originalCallback = callbacks.itemsCallbackMultiChoice;

          callbacks.itemsCallbackMultiChoice = function (selected) {
            var indices = selected.split(',').map(function (x) {
              return parseInt(x);
            });
            var elements = indices.map(function (ind) {
              return (finalOptions.items || [])[ind];
            });

            if (indices.length === 1 && isNaN(indices[0])) {
              indices = [];
              elements = [];
            }

            originalCallback(indices, elements);
          };
        }

        var callbackFunc = function callbackFunc(cb) {
          for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }

          return callbacks[cb].apply(callbacks, rest);
        };

        NativeModules.DialogAndroid.show(finalOptions, callbackFunc);
      }
    }, {
      key: "dismiss",
      value: function dismiss() {
        NativeModules.DialogAndroid.dismiss();
      }
    }, {
      key: "list",
      value: function list(options, cb) {
        NativeModules.DialogAndroid.list(options, cb);
      }
    }]);

    return DialogAndroid;
  }();

  module.exports = DialogAndroid;
});