__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var isString = function isString(str) {
    return Object.prototype.toString.call(str) === '[object String]';
  };

  var isBool = function isBool(bool) {
    return Object.prototype.toString.call(bool) === '[object Boolean]';
  };

  var createError = function createError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return Promise.reject(new Error(msg));
  };

  var openLink = function openLink(url, cb) {
    return _reactNative.Linking.canOpenURL(url).then(function (canOpen) {
      if (!canOpen) {
        return createError("invalid URL provided: " + url);
      } else {
        return _reactNative.Linking.openURL(url).catch(function (err) {
          return Promise.reject(err);
        });
      }
    });
  };

  var call = function call() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var settings = _extends({
      prompt: true
    }, args);

    if (!settings.number) {
      return createError('no number provided');
    }

    if (!isString(settings.number)) {
      return createError('number should be string');
    }

    if (!isBool(settings.prompt)) {
      return createError('prompt should be bool');
    }

    var url = "" + (_reactNative.Platform.OS === 'ios' && settings.prompt ? 'telprompt:' : 'tel:') + settings.number;
    return openLink(url);
  };

  exports.default = call;
});