__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-offline/src/withNetworkConnectivity.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _hoistNonReactStatics = _require(_dependencyMap[4], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

  var _actionCreators = _require(_dependencyMap[5], "./actionCreators");

  var _reactConnectionStore = _require(_dependencyMap[6], "./reactConnectionStore");

  var _reactConnectionStore2 = _interopRequireDefault(_reactConnectionStore);

  var _checkInternetAccess = _require(_dependencyMap[7], "./checkInternetAccess");

  var _checkInternetAccess2 = _interopRequireDefault(_checkInternetAccess);

  var _checkConnectivityInterval = _require(_dependencyMap[8], "./checkConnectivityInterval");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    EnhancedComponent: {
      displayName: "EnhancedComponent",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-offline/src/withNetworkConnectivity.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var withNetworkConnectivity = function withNetworkConnectivity() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$withRedux = _ref.withRedux,
        withRedux = _ref$withRedux === undefined ? false : _ref$withRedux,
        _ref$timeout = _ref.timeout,
        timeout = _ref$timeout === undefined ? 3000 : _ref$timeout,
        _ref$pingServerUrl = _ref.pingServerUrl,
        pingServerUrl = _ref$pingServerUrl === undefined ? 'http://www.google.com/' : _ref$pingServerUrl,
        _ref$withExtraHeadReq = _ref.withExtraHeadRequest,
        withExtraHeadRequest = _ref$withExtraHeadReq === undefined ? true : _ref$withExtraHeadReq,
        _ref$checkConnectionI = _ref.checkConnectionInterval,
        checkConnectionInterval = _ref$checkConnectionI === undefined ? 0 : _ref$checkConnectionI,
        _ref$checkInBackgroun = _ref.checkInBackground,
        checkInBackground = _ref$checkInBackgroun === undefined ? false : _ref$checkInBackgroun,
        _ref$httpMethod = _ref.httpMethod,
        httpMethod = _ref$httpMethod === undefined ? 'HEAD' : _ref$httpMethod;

    return function (WrappedComponent) {
      var _class, _temp2;

      if (typeof withRedux !== 'boolean') {
        throw new Error('you should pass a boolean as withRedux parameter');
      }

      if (typeof timeout !== 'number') {
        throw new Error('you should pass a number as timeout parameter');
      }

      if (typeof pingServerUrl !== 'string') {
        throw new Error('you should pass a string as pingServerUrl parameter');
      }

      var EnhancedComponent = _wrapComponent("EnhancedComponent")((_temp2 = _class = function (_PureComponent) {
        _inherits(EnhancedComponent, _PureComponent);

        function EnhancedComponent() {
          var _ref2;

          var _temp, _this, _ret;

          _classCallCheck(this, EnhancedComponent);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = EnhancedComponent.__proto__ || Object.getPrototypeOf(EnhancedComponent)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
            isConnected: _reactConnectionStore2.default.getConnection()
          }, _this.handleNetInfoChange = function (isConnected) {
            if (!isConnected) {
              _this.handleConnectivityChange(isConnected);
            } else {
              _this.checkInternet();
            }
          }, _this.checkInternet = function () {
            if (checkInBackground === false && _reactNative.AppState.currentState !== 'active') {
              return;
            }

            (0, _checkInternetAccess2.default)(timeout, pingServerUrl, httpMethod).then(function (hasInternetAccess) {
              _this.handleConnectivityChange(hasInternetAccess);
            });
          }, _this.handleConnectivityChange = function (isConnected) {
            var store = _this.context.store;

            _reactConnectionStore2.default.setConnection(isConnected);

            if (typeof store === 'object' && typeof store.dispatch === 'function' && withRedux === true) {
              var actionQueue = store.getState().network.actionQueue;

              if (isConnected !== store.getState().network.isConnected) {
                store.dispatch((0, _actionCreators.connectionChange)(isConnected));
              }

              if (isConnected && actionQueue.length > 0) {
                actionQueue.forEach(function (action) {
                  store.dispatch(action);
                });
              }
            }

            _this.setState({
              isConnected: isConnected
            });
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(EnhancedComponent, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            _reactNative.NetInfo.isConnected.addEventListener('connectionChange', withExtraHeadRequest ? this.handleNetInfoChange : this.handleConnectivityChange);

            if (_reactNative.Platform.OS === 'android') {
              _reactNative.NetInfo.isConnected.fetch().then(withExtraHeadRequest ? this.handleNetInfoChange : this.handleConnectivityChange);
            }

            (0, _checkConnectivityInterval.setupConnectivityCheckInterval)(this.checkInternet, checkConnectionInterval);
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            _reactNative.NetInfo.isConnected.removeEventListener('connectionChange', withExtraHeadRequest ? this.handleNetInfoChange : this.handleConnectivityChange);

            (0, _checkConnectivityInterval.clearConnectivityCheckInterval)();
          }
        }, {
          key: "render",
          value: function render() {
            return _react3.default.createElement(WrappedComponent, _extends({}, this.props, {
              isConnected: !withRedux ? this.state.isConnected : undefined,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 148
              }
            }));
          }
        }]);

        return EnhancedComponent;
      }(_react2.PureComponent), _class.displayName = "withNetworkConnectivity(" + WrappedComponent.displayName + ")", _class.contextTypes = {
        store: _propTypes2.default.shape({
          dispatch: _propTypes2.default.func
        })
      }, _temp2));

      return (0, _hoistNonReactStatics2.default)(EnhancedComponent, WrappedComponent);
    };
  };

  exports.default = withNetworkConnectivity;
});