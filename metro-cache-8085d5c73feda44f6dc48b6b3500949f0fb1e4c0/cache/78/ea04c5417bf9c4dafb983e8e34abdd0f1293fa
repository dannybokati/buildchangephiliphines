__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-pdf/index.js";

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _reactNativeFetchBlob = _require(_dependencyMap[4], "react-native-fetch-blob");

    var _reactNativeFetchBlob2 = _interopRequireDefault(_reactNativeFetchBlob);

    var _resolveAssetSource = _require(_dependencyMap[5], "react-native/Libraries/Image/resolveAssetSource");

    var _resolveAssetSource2 = _interopRequireDefault(_resolveAssetSource);

    var _PdfView = _require(_dependencyMap[6], "./PdfView");

    var _PdfView2 = _interopRequireDefault(_PdfView);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Pdf: {
            displayName: "Pdf"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-pdf/index.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var SHA1 = _require(_dependencyMap[7], 'crypto-js/sha1');

    var Pdf = _wrapComponent("Pdf")((_temp = _class = function (_Component) {
        _inherits(Pdf, _Component);

        function Pdf(props) {
            var _this2 = this;

            _classCallCheck(this, Pdf);

            var _this = _possibleConstructorReturn(this, (Pdf.__proto__ || Object.getPrototypeOf(Pdf)).call(this, props));

            _this._loadFromSource = function (newSource) {
                var source = (0, _resolveAssetSource2.default)(newSource) || {};
                var uri = source.uri || '';

                _this.setState({
                    isDownloaded: false,
                    path: '',
                    progress: 0
                });

                var cacheFile = _reactNativeFetchBlob2.default.fs.dirs.CacheDir + '/' + SHA1(uri) + '.pdf';

                if (source.cache) {
                    _reactNativeFetchBlob2.default.fs.stat(cacheFile).then(function (stats) {
                        if (!Boolean(source.expiration) || source.expiration * 1000 + stats.lastModified > new Date().getTime()) {
                            _this.setState({
                                path: cacheFile,
                                isDownloaded: true
                            });
                        } else {
                            _this._prepareFile(source);
                        }
                    }).catch(function () {
                        _this._prepareFile(source);
                    });
                } else {
                    _this._prepareFile(source);
                }
            };

            _this._prepareFile = function _callee3(source) {
                var uri, isNetwork, isAsset, isBase64, cacheFile, data;
                return regeneratorRuntime.async(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.prev = 0;

                                if (!source.uri) {
                                    _context3.next = 12;
                                    break;
                                }

                                uri = source.uri || '';
                                isNetwork = !!(uri && uri.match(/^https?:\/\//));
                                isAsset = !!(uri && uri.match(/^bundle-assets:\/\//));
                                isBase64 = !!(uri && uri.match(/^data:application\/pdf;base64/));
                                cacheFile = _reactNativeFetchBlob2.default.fs.dirs.CacheDir + '/' + SHA1(uri) + '.pdf';
                                _context3.next = 9;
                                return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(cacheFile));

                            case 9:
                                if (isNetwork) {
                                    _this._downloadFile(source, cacheFile);
                                } else if (isAsset) {
                                    _reactNativeFetchBlob2.default.fs.cp(uri, cacheFile).then(function () {
                                        _this.setState({
                                            path: cacheFile,
                                            isDownloaded: true
                                        });
                                    }).catch(function _callee(error) {
                                        return regeneratorRuntime.async(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        _context.next = 2;
                                                        return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(cacheFile));

                                                    case 2:
                                                        _this._onError(error);

                                                    case 3:
                                                    case "end":
                                                        return _context.stop();
                                                }
                                            }
                                        }, null, _this2);
                                    });
                                } else if (isBase64) {
                                    data = uri.replace(/data:application\/pdf;base64,/i, '');

                                    _reactNativeFetchBlob2.default.fs.writeFile(cacheFile, data, 'base64').then(function () {
                                        _this.setState({
                                            path: cacheFile,
                                            isDownloaded: true
                                        });
                                    }).catch(function _callee2(error) {
                                        return regeneratorRuntime.async(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        _context2.next = 2;
                                                        return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(cacheFile));

                                                    case 2:
                                                        _this._onError(error);

                                                    case 3:
                                                    case "end":
                                                        return _context2.stop();
                                                }
                                            }
                                        }, null, _this2);
                                    });
                                } else {
                                    _this.setState({
                                        path: uri.replace(/file:\/\//i, ''),
                                        isDownloaded: true
                                    });
                                }

                                _context3.next = 13;
                                break;

                            case 12:
                                _this._onError(new Error('no pdf source!'));

                            case 13:
                                _context3.next = 18;
                                break;

                            case 15:
                                _context3.prev = 15;
                                _context3.t0 = _context3["catch"](0);

                                _this._onError(_context3.t0);

                            case 18:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, null, _this2, [[0, 15]]);
            };

            _this._downloadFile = function _callee8(source, cacheFile) {
                var tempCacheFile;
                return regeneratorRuntime.async(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                if (_this.lastRNBFTask) {
                                    _this.lastRNBFTask.cancel(function (err) {});

                                    _this.lastRNBFTask = null;
                                }

                                tempCacheFile = cacheFile + '.tmp';
                                _context8.next = 4;
                                return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(tempCacheFile));

                            case 4:
                                _this.lastRNBFTask = _reactNativeFetchBlob2.default.config({
                                    path: tempCacheFile
                                }).fetch(source.method ? source.method : 'GET', source.uri, source.headers ? source.headers : {}, source.body ? source.body : "").progress(function (received, total) {
                                    _this.props.onLoadProgress && _this.props.onLoadProgress(received / total);

                                    _this.setState({
                                        progress: received / total
                                    });
                                });

                                _this.lastRNBFTask.then(function _callee6(res) {
                                    var status;
                                    return regeneratorRuntime.async(function _callee6$(_context6) {
                                        while (1) {
                                            switch (_context6.prev = _context6.next) {
                                                case 0:
                                                    status = res.respInfo.status;
                                                    _this.lastRNBFTask = null;
                                                    _context6.t0 = status;
                                                    _context6.next = _context6.t0 === 200 ? 5 : _context6.t0 === 204 ? 5 : _context6.t0 === 304 ? 5 : 7;
                                                    break;

                                                case 5:
                                                    _reactNativeFetchBlob2.default.fs.unlink(cacheFile).then(function () {
                                                        _reactNativeFetchBlob2.default.fs.cp(tempCacheFile, cacheFile).then(function () {
                                                            _this.setState({
                                                                path: cacheFile,
                                                                isDownloaded: true,
                                                                progress: 1
                                                            });
                                                        }).catch(function _callee4(error) {
                                                            return regeneratorRuntime.async(function _callee4$(_context4) {
                                                                while (1) {
                                                                    switch (_context4.prev = _context4.next) {
                                                                        case 0:
                                                                            _context4.next = 2;
                                                                            return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(tempCacheFile));

                                                                        case 2:
                                                                            _context4.next = 4;
                                                                            return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(cacheFile));

                                                                        case 4:
                                                                            _this._onError(error);

                                                                        case 5:
                                                                        case "end":
                                                                            return _context4.stop();
                                                                    }
                                                                }
                                                            }, null, _this2);
                                                        });
                                                    }).catch(function _callee5(error) {
                                                        return regeneratorRuntime.async(function _callee5$(_context5) {
                                                            while (1) {
                                                                switch (_context5.prev = _context5.next) {
                                                                    case 0:
                                                                        _context5.next = 2;
                                                                        return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(tempCacheFile));

                                                                    case 2:
                                                                        _context5.next = 4;
                                                                        return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(cacheFile));

                                                                    case 4:
                                                                        _this._onError(error);

                                                                    case 5:
                                                                    case "end":
                                                                        return _context5.stop();
                                                                }
                                                            }
                                                        }, null, _this2);
                                                    });

                                                    return _context6.abrupt("break", 13);

                                                case 7:
                                                    _context6.next = 9;
                                                    return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(tempCacheFile));

                                                case 9:
                                                    _context6.next = 11;
                                                    return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(cacheFile));

                                                case 11:
                                                    _this._onError(new Error("load pdf failed with code " + status));

                                                    return _context6.abrupt("break", 13);

                                                case 13:
                                                case "end":
                                                    return _context6.stop();
                                            }
                                        }
                                    }, null, _this2);
                                }).catch(function _callee7(error) {
                                    return regeneratorRuntime.async(function _callee7$(_context7) {
                                        while (1) {
                                            switch (_context7.prev = _context7.next) {
                                                case 0:
                                                    _context7.next = 2;
                                                    return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(tempCacheFile));

                                                case 2:
                                                    _context7.next = 4;
                                                    return regeneratorRuntime.awrap(_reactNativeFetchBlob2.default.fs.unlink(cacheFile));

                                                case 4:
                                                    _this._onError(error);

                                                case 5:
                                                case "end":
                                                    return _context7.stop();
                                            }
                                        }
                                    }, null, _this2);
                                });

                            case 6:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, null, _this2);
            };

            _this.setNativeProps = function (nativeProps) {
                _this._root.setNativeProps(nativeProps);
            };

            _this._onChange = function (event) {
                var message = event.nativeEvent.message.split('|');

                if (message.length > 0) {
                    if (message[0] === 'loadComplete') {
                        _this.props.onLoadComplete && _this.props.onLoadComplete(Number(message[1]), _this.state.path, {
                            width: Number(message[2]),
                            height: Number(message[3])
                        });
                    } else if (message[0] === 'pageChanged') {
                        _this.props.onPageChanged && _this.props.onPageChanged(Number(message[1]), Number(message[2]));
                    } else if (message[0] === 'error') {
                        _this._onError(new Error(message[1]));
                    } else if (message[0] === 'pageSingleTap') {
                        _this.props.onPageSingleTap && _this.props.onPageSingleTap(message[1]);
                    } else if (message[0] === 'scaleChanged') {
                        _this.props.onScaleChanged && _this.props.onScaleChanged(message[1]);
                    }
                }
            };

            _this._onError = function (error) {
                _this.props.onError && _this.props.onError(error);
            };

            _this.state = {
                path: '',
                isDownloaded: false,
                progress: 0
            };
            _this.lastRNBFTask = null;
            return _this;
        }

        _createClass(Pdf, [{
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
                var _this3 = this;

                var nextSource = (0, _resolveAssetSource2.default)(nextProps.source);
                var curSource = (0, _resolveAssetSource2.default)(this.props.source);

                if (nextSource.uri !== curSource.uri) {
                    if (this.lastRNBFTask) {
                        this.lastRNBFTask.cancel(function (err) {
                            _this3._loadFromSource(nextProps.source);
                        });
                        this.lastRNBFTask = null;
                    } else {
                        this._loadFromSource(nextProps.source);
                    }
                }
            }
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {
                this._loadFromSource(this.props.source);
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (this.lastRNBFTask) {
                    this.lastRNBFTask.cancel(function (err) {});
                    this.lastRNBFTask = null;
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this4 = this;

                if (!this.state.isDownloaded) {
                    return _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.progressContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 330
                            }
                        },
                        this.props.activityIndicator ? this.props.activityIndicator : _reactNative.Platform.OS === 'android' ? _react3.default.createElement(_reactNative.ProgressBarAndroid, _extends({
                            progress: this.state.progress,
                            indeterminate: false,
                            styleAttr: "Horizontal",
                            style: styles.progressBar
                        }, this.props.activityIndicatorProps, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 336
                            }
                        })) : _react3.default.createElement(_reactNative.ProgressViewIOS, _extends({
                            progress: this.state.progress,
                            style: styles.progressBar
                        }, this.props.activityIndicatorProps, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 343
                            }
                        }))
                    );
                } else {
                    if (_reactNative.Platform.OS === "android") {
                        return _react3.default.createElement(PdfCustom, _extends({
                            ref: function ref(component) {
                                return _this4._root = component;
                            }
                        }, this.props, {
                            style: [{
                                backgroundColor: '#EEE'
                            }, this.props.style],
                            path: this.state.path,
                            onChange: this._onChange,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 353
                            }
                        }));
                    } else if (_reactNative.Platform.OS === "ios") {
                        return _react3.default.createElement(_PdfView2.default, _extends({}, this.props, {
                            style: [{
                                backgroundColor: '#EEE'
                            }, this.props.style],
                            path: this.state.path,
                            onLoadComplete: this.props.onLoadComplete,
                            onPageChanged: this.props.onPageChanged,
                            onError: this._onError,
                            onPageSingleTap: this.props.onPageSingleTap,
                            onScaleChanged: this.props.onScaleChanged,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 363
                            }
                        }));
                    } else {
                        return null;
                    }
                }
            }
        }]);

        return Pdf;
    }(_react2.Component), _class.propTypes = _extends({}, _reactNative.ViewPropTypes, {
        source: _propTypes2.default.oneOfType([_propTypes2.default.shape({
            uri: _propTypes2.default.string,
            cache: _propTypes2.default.bool,
            expiration: _propTypes2.default.number
        }), _propTypes2.default.number]).isRequired,
        page: _propTypes2.default.number,
        scale: _propTypes2.default.number,
        horizontal: _propTypes2.default.bool,
        spacing: _propTypes2.default.number,
        password: _propTypes2.default.string,
        progressBarColor: _propTypes2.default.string,
        activityIndicator: _propTypes2.default.any,
        activityIndicatorProps: _propTypes2.default.any,
        enableAntialiasing: _propTypes2.default.bool,
        fitPolicy: _propTypes2.default.number,
        onLoadComplete: _propTypes2.default.func,
        onPageChanged: _propTypes2.default.func,
        onError: _propTypes2.default.func,
        onPageSingleTap: _propTypes2.default.func,
        onScaleChanged: _propTypes2.default.func,
        accessibilityLabel: _propTypes2.default.string,
        importantForAccessibility: _propTypes2.default.string,
        renderToHardwareTextureAndroid: _propTypes2.default.string,
        testID: _propTypes2.default.string,
        onLayout: _propTypes2.default.bool,
        accessibilityLiveRegion: _propTypes2.default.string,
        accessibilityComponentType: _propTypes2.default.string
    }), _class.defaultProps = {
        password: "",
        scale: 1,
        spacing: 10,
        fitPolicy: 2,
        horizontal: false,
        page: 1,
        activityIndicatorProps: {
            color: '#009900',
            progressTintColor: '#009900'
        },
        onLoadProgress: function onLoadProgress(percent) {},
        onLoadComplete: function onLoadComplete(numberOfPages, path) {},
        onPageChanged: function onPageChanged(page, numberOfPages) {},
        onError: function onError(error) {},
        onPageSingleTap: function onPageSingleTap(page) {},
        onScaleChanged: function onScaleChanged(scale) {}
    }, _temp));

    exports.default = Pdf;

    if (_reactNative.Platform.OS === "android") {
        var PdfCustom = (0, _reactNative.requireNativeComponent)('RCTPdf', Pdf, {
            nativeOnly: {
                path: true,
                onChange: true
            }
        });
    }

    var styles = _reactNative.StyleSheet.create({
        progressContainer: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center'
        },
        progressBar: {
            width: 200,
            height: 2
        }
    });
});