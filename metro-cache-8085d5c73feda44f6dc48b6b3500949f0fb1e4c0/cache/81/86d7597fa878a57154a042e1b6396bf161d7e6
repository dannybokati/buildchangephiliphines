__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/src/components/SettingsComponent.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNativeSettingsComponents = _require(_dependencyMap[2], "react-native-settings-components");

  var _reactNativeRouterFlux = _require(_dependencyMap[3], "react-native-router-flux");

  var _reactNativeZipArchive = _require(_dependencyMap[4], "react-native-zip-archive");

  var _reactNativeFetchBlob = _require(_dependencyMap[5], "react-native-fetch-blob");

  var _reactNativeFetchBlob2 = _interopRequireDefault(_reactNativeFetchBlob);

  var _reactNativeOffline = _require(_dependencyMap[6], "react-native-offline");

  var _reactNative = _require(_dependencyMap[7], "react-native");

  var _reactNativeElements = _require(_dependencyMap[8], "react-native-elements");

  var _strings = _require(_dependencyMap[9], "./../../locales/strings");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SettingsScene: {
      displayName: "SettingsScene"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/nishon/ReactNativeProject/buildchange-ph/src/components/SettingsComponent.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var SettingsScene = _wrapComponent("SettingsScene")(function (_Component) {
    _inherits(SettingsScene, _Component);

    function SettingsScene() {
      _classCallCheck(this, SettingsScene);

      var _this = _possibleConstructorReturn(this, (SettingsScene.__proto__ || Object.getPrototypeOf(SettingsScene)).call(this));

      _this.state = {
        locale: '',
        gender: ''
      };
      return _this;
    }

    _createClass(SettingsScene, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var value = void 0;

        switch (_strings.strings.getLanguage().trim()) {
          case 'ne':
            value = 'Nepali';
            break;

          default:
            value = 'English';
            break;
        }

        this.setState({
          locale: value
        });
      }
    }, {
      key: "userLogout",
      value: function userLogout() {
        return regeneratorRuntime.async(function userLogout$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.removeItem('token'));

              case 3:
                _reactNativeRouterFlux.Actions.SecondPage();

                _context.next = 9;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](0);
                console.log(_context.t0.message);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[0, 6]]);
      }
    }, {
      key: "downloadLatestZip",
      value: function downloadLatestZip() {
        _reactNativeFetchBlob2.default.fs.unlink('/storage/emulated/0/Android/data/com.guide/build_change_philippines').then(function () {
          _reactNativeFetchBlob2.default.fs.unlink('/storage/emulated/0/Android/data/com.guide/build_change_philippines.zip').then(function () {
            (0, _reactNativeOffline.checkInternetConnection)().then(function (res) {
              if (res) {
                _reactNativeFetchBlob2.default.config({
                  addAndroidDownloads: {
                    useDownloadManager: true,
                    path: _reactNativeFetchBlob2.default.fs.dirs.SDCardApplicationDir + '/build_change_philippines.zip',
                    description: 'Images Zip',
                    mediaScannable: true
                  }
                }).fetch('GET', 'http://bccms.naxa.com.np/core/project-material-photos/1').then(function (resp) {
                  var sourcePath = resp.path();
                  var targetPath = resp.path().replace('.zip', '');
                  (0, _reactNativeZipArchive.unzip)(sourcePath, targetPath).then(function (path) {
                    console.log("unzip completed at " + path);
                  }).catch(function (error) {
                    console.log(error);
                  });
                });
              } else if (!res) {
                _reactNative.Alert.alert('No internet connection!');
              }
            }).catch(function (error) {
              console.log(error);
            });
          }).catch(function (err) {
            console.log(err);
          });
        }).catch(function (err) {
          console.log(err);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: {
              justifyContent: 'space-between',
              flex: 1,
              backgroundColor: _reactNative.Platform.OS === 'ios' ? colors.iosSettingsBackground : colors.white
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 102
              }
            },
            _react3.default.createElement(_reactNativeSettingsComponents.SettingsCategoryHeader, {
              title: '',
              textStyle: _reactNative.Platform.OS === 'android' ? {
                color: colors.monza
              } : null,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 103
              }
            }),
            _react3.default.createElement(_reactNativeSettingsComponents.SettingsPicker, {
              title: "Language",
              dialogDescription: 'Choose your language.',
              possibleValues: [{
                label: '...',
                value: '...'
              }, {
                label: 'English',
                value: 'English'
              }, {
                label: 'Warray',
                value: 'Warray'
              }],
              negativeButtonTitle: 'Cancel',
              positiveButtonTitle: 'Save',
              onSaveValue: function onSaveValue(value) {
                console.log('locale:', value);

                switch (value) {
                  case 'Warray':
                    _reactNative.AsyncStorage.setItem('locale', 'wa');

                    break;

                  default:
                    _reactNative.AsyncStorage.setItem('locale', 'en');

                    break;
                }

                _this2.setState({
                  locale: value
                });

                _reactNative.Alert.alert('App restart required to change langugage');
              },
              value: this.state.locale,
              styleModalButtonsText: {
                color: colors.monza
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 108
              }
            })
          ),
          _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                paddingBottom: 10
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 140
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: {
                  paddingBottom: 20
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 141
                }
              },
              _react3.default.createElement(_reactNativeElements.Button, {
                onPress: this.downloadLatestZip.bind(this),
                style: {
                  width: 10
                },
                title: "DOWNLOAD LATEST ZIP",
                backgroundColor: "green",
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 142
                }
              })
            ),
            _react3.default.createElement(_reactNativeElements.Button, {
              onPress: this.userLogout.bind(this),
              style: {
                width: 10
              },
              title: "LOGOUT",
              backgroundColor: "red",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 149
              }
            })
          )
        );
      }
    }]);

    return SettingsScene;
  }(_react2.Component));

  exports.default = SettingsScene;
  var colors = {
    iosSettingsBackground: 'rgb(235,235,241)',
    white: '#FFFFFF',
    monza: '#C70039',
    switchEnabled: _reactNative.Platform.OS === 'android' ? '#C70039' : null,
    switchDisabled: _reactNative.Platform.OS === 'android' ? '#efeff3' : null,
    switchOnTintColor: _reactNative.Platform.OS === 'android' ? 'rgba(199, 0, 57, 0.6)' : null,
    blueGem: '#27139A'
  };
});