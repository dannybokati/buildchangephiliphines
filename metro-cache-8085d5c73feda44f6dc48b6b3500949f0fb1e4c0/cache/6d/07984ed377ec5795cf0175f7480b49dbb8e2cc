__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-settings-components/src/divider/divider-short.js";

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        SettingsDividerShort: {
            displayName: "SettingsDividerShort"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-settings-components/src/divider/divider-short.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var SettingsDividerShort = _wrapComponent("SettingsDividerShort")((_temp = _class = function (_Component) {
        _inherits(SettingsDividerShort, _Component);

        function SettingsDividerShort() {
            _classCallCheck(this, SettingsDividerShort);

            return _possibleConstructorReturn(this, (SettingsDividerShort.__proto__ || Object.getPrototypeOf(SettingsDividerShort)).apply(this, arguments));
        }

        _createClass(SettingsDividerShort, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    containerStyle = _props.containerStyle,
                    dividerStyle = _props.dividerStyle;
                return _reactNative.Platform.OS === "ios" && this.props.ios || _reactNative.Platform.OS === "android" && this.props.android ? _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: [styles.containerStyle, containerStyle],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 25
                        }
                    },
                    _react3.default.createElement(_reactNative.View, {
                        style: [styles.dividerStyle, dividerStyle],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 26
                        }
                    })
                ) : null;
            }
        }]);

        return SettingsDividerShort;
    }(_react2.Component), _class.propTypes = {
        ios: _propTypes2.default.bool,
        android: _propTypes2.default.bool,
        containerStyle: _reactNative.ViewPropTypes ? _reactNative.ViewPropTypes.style : _reactNative.View.propTypes.style,
        dividerStyle: _reactNative.ViewPropTypes ? _reactNative.ViewPropTypes.style : _reactNative.View.propTypes.style
    }, _class.defaultProps = {
        ios: true,
        android: true,
        containerStyle: {},
        dividerStyle: {}
    }, _temp));

    exports.default = SettingsDividerShort;

    var styles = _reactNative.StyleSheet.create({
        containerStyle: {
            width: "100%",
            height: 1,
            paddingLeft: 16,
            backgroundColor: "rgb(255,255,255)"
        },
        dividerStyle: {
            width: "100%",
            height: "100%",
            backgroundColor: "rgb(220,220,223)"
        }
    });
});