__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/src/components/scenes/ShowDocuments.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _reactRedux = _require(_dependencyMap[3], "react-redux");

    var _reactNativePdf = _require(_dependencyMap[4], "react-native-pdf");

    var _reactNativePdf2 = _interopRequireDefault(_reactNativePdf);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        ShowDocuments: {
            displayName: "ShowDocuments"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/nishon/ReactNativeProject/buildchange-ph/src/components/scenes/ShowDocuments.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var ShowDocuments = _wrapComponent("ShowDocuments")(function (_React$Component) {
        _inherits(ShowDocuments, _React$Component);

        function ShowDocuments() {
            _classCallCheck(this, ShowDocuments);

            return _possibleConstructorReturn(this, (ShowDocuments.__proto__ || Object.getPrototypeOf(ShowDocuments)).apply(this, arguments));
        }

        _createClass(ShowDocuments, [{
            key: "render",
            value: function render() {
                console.log('ShowDocumentsko_render_bhitra');
                console.log(this.props.selectedSchoolId);
                var source = {
                    uri: this.props.path,
                    cache: true
                };
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 19
                        }
                    },
                    _react3.default.createElement(_reactNativePdf2.default, {
                        source: source,
                        onLoadComplete: function onLoadComplete(numberOfPages) {
                            console.log("number of pages: " + numberOfPages);
                        },
                        onPageChanged: function onPageChanged(page) {
                            console.log("current page: " + page);
                        },
                        onError: function onError(error) {
                            console.log(error);
                        },
                        style: styles.pdf,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 20
                        }
                    })
                );
            }
        }]);

        return ShowDocuments;
    }(_react3.default.Component));

    var mapStateToProps = function mapStateToProps(state) {
        console.log('ShowDocumentsko_mapstatetoprops_bhitra');
        console.log(state);
        return {
            selectedSchoolId: state.currentSelectedSchool.selectedSchoolId
        };
    };

    exports.default = (0, _reactRedux.connect)(mapStateToProps)(ShowDocuments);

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'flex-start',
            alignItems: 'center'
        },
        pdf: {
            flex: 1,
            width: _reactNative.Dimensions.get('window').width
        }
    });
});