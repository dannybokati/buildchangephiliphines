__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

    var PdfManagerNative = _require(_dependencyMap[1], 'react-native').NativeModules.PdfManager;

    var PdfManager = function () {
        function PdfManager() {
            _classCallCheck(this, PdfManager);
        }

        _createClass(PdfManager, null, [{
            key: "loadFile",
            value: function loadFile(path, password) {
                invariant(typeof path === 'string', 'path must be a valid string.');

                if (password === undefined) {
                    password = "";
                }

                return PdfManagerNative.loadFile(path, password);
            }
        }]);

        return PdfManager;
    }();

    exports.default = PdfManager;
});