__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/src/components/ReportForm.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactNativeElements = _require(_dependencyMap[3], "react-native-elements");

  var _reactNativeImagePicker = _require(_dependencyMap[4], "react-native-image-picker");

  var _reactNativeImagePicker2 = _interopRequireDefault(_reactNativeImagePicker);

  var _reactNativeRouterFlux = _require(_dependencyMap[5], "react-native-router-flux");

  var _strings = _require(_dependencyMap[6], "./../../locales/strings");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ReportForm: {
      displayName: "ReportForm"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/nishon/ReactNativeProject/buildchange-ph/src/components/ReportForm.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ReportForm = _wrapComponent("ReportForm")(function (_Component) {
    _inherits(ReportForm, _Component);

    function ReportForm() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ReportForm);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReportForm.__proto__ || Object.getPrototypeOf(ReportForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        avatarSource: null,
        comments: '',
        uploading: false,
        uri: null
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ReportForm, [{
      key: "selectPhotoTapped",
      value: function selectPhotoTapped() {
        var _this2 = this;

        var options = {
          quality: 1.0,
          maxWidth: 500,
          maxHeight: 500,
          storageOptions: {
            skipBackup: true
          }
        };

        _reactNativeImagePicker2.default.showImagePicker(options, function (response) {
          console.log('Response = ', response);

          if (response.didCancel) {
            console.log('User cancelled photo picker');
          } else if (response.error) {
            console.log('ImagePicker Error: ', response.error);
          } else if (response.customButton) {
            console.log('User tapped custom button: ', response.customButton);
          } else {
            var source = {
              uri: response.uri
            };

            _this2.setState(_extends({}, _this2.state, {
              uri: response.uri
            }));

            _this2.setState({
              avatarSource: source
            });
          }
        });
      }
    }, {
      key: "uploadComment",
      value: function uploadComment(checklist) {
        var _this3 = this;

        console.log('uploadCommentko_bhitra');
        console.log(this.props);
        var id = checklist.substep.id;

        if (!this.state.comments || !this.state.uri) {
          return;
        }

        this.setState(_extends({}, this.state, {
          uploading: true
        }));

        _reactNative.AsyncStorage.multiGet(['user_id', 'token']).then(function (user) {
          var userID = void 0;
          var token = void 0;

          if (user[0][0] === 'user_id') {
            userID = user[0][1];
          } else if (user[1][0] === 'user_id') {
            userID = user[1][1];
          }

          if (user[0][0] === 'token') {
            userID = user[0][1];
          } else if (user[1][0] === 'token') {
            token = user[1][1];
          }

          console.log(userID);
          console.log(token);
          var url = 'http://bccms.naxa.com.np/core/api/report/';
          var formdata = new FormData();
          formdata.append('comment', _this3.state.comments);
          formdata.append('user', userID);
          formdata.append('substep', id);
          formdata.append('photo', {
            uri: _this3.state.uri,
            type: 'image/jpeg',
            name: 'comment.jpeg'
          });
          var req = {
            method: 'POST',
            headers: {
              Authorization: 'token ' + token,
              'Content-Type': 'multipart/form-data'
            },
            body: formdata
          };
          fetch(url, req).then(function (response) {
            if (response.ok) {
              console.log('response ok');

              _this3.setState(_extends({}, _this3.state, {
                uploading: false
              }));

              _this3.setState(_extends({}, _this3.state, {
                comments: ''
              }));

              _reactNative.Alert.alert('Uploaded Sucess', 'Your report has been recorded. ', [{
                text: 'Close',
                onPress: function onPress() {
                  return _reactNativeRouterFlux.Actions.pop();
                },
                style: 'cancel'
              }]);

              return response;
            }

            _this3.setState(_extends({}, _this3.state, {
              uploading: false
            }));

            _reactNative.Alert.alert('Uploaded Failed', 'Check your internet connection and try again', [{
              text: 'Close',
              onPress: function onPress() {
                return console.log('Cancel Pressed');
              },
              style: 'cancel'
            }]);

            console.log('response error');
            var error = new Error(response.statusText);
            error.response = response;
            throw error;
          }).then(function (response) {
            return response.json();
          }).then(function (json) {
            console.log(json);
          }).catch(function (error) {
            return console.log(error);
          });
          console.log(req);
        });
      }
    }, {
      key: "toggleUploadAnim",
      value: function toggleUploadAnim() {
        this.setState(_extends({}, this.state, {
          uploading: !this.state.uploading
        }));
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        return _react3.default.createElement(
          _reactNative.ScrollView,
          {
            style: {
              backgroundColor: '#fff'
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 149
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 150
              }
            },
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: styles.centerHeader,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 151
                }
              },
              "Please fill up the form and send your report"
            ),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: {
                  margin: 15,
                  borderWidth: 1,
                  padding: 10,
                  paddingTop: 5,
                  borderColor: 'rgba(0,0,0,.3)'
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 154
                }
              },
              _react3.default.createElement(_reactNative.TextInput, {
                editable: true,
                onChangeText: function onChangeText(comments) {
                  return _this4.setState(_extends({}, _this4.state, {
                    comments: comments
                  }));
                },
                placeholder: _strings.strings.error_field_cannot_be_empty,
                ref: "comments",
                returnKeyType: "next",
                value: this.state.comments,
                autoCapitalize: "none",
                underlineColorAndroid: "transparent",
                style: {
                  textAlignVertical: 'top',
                  minHeight: 100,
                  lineHeight: 24,
                  fontWeight: 'normal',
                  fontSize: 16
                },
                multiline: true,
                autoFocus: true,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 155
                }
              })
            ),
            _react3.default.createElement(_reactNativeElements.Button, {
              icon: {
                name: 'camera',
                size: 24,
                color: 'white'
              },
              onPress: this.selectPhotoTapped.bind(this),
              title: _strings.strings.view_take_photo,
              titleStyle: {
                fontWeight: '700'
              },
              containerStyle: {
                marginTop: 20
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 169
              }
            }),
            _react3.default.createElement(_reactNativeElements.Button, {
              onPress: this.uploadComment.bind(this, this.props),
              loading: this.state.uploading,
              title: _strings.strings.action_report,
              loadingProps: {
                size: 'large',
                color: 'rgba(111, 202, 186, 1)'
              },
              titleStyle: {
                fontWeight: '700'
              },
              buttonStyle: {
                backgroundColor: '#8CC63E',
                marginTop: 10
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 180
              }
            }),
            _react3.default.createElement(_reactNativeElements.Button, {
              onPress: function onPress() {
                return _reactNativeRouterFlux.Actions.pop();
              },
              title: _strings.strings.action_cancel,
              titleStyle: {
                fontWeight: '700'
              },
              buttonStyle: {
                backgroundColor: '#E8656A',
                marginTop: 10
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 191
              }
            })
          )
        );
      }
    }]);

    return ReportForm;
  }(_react2.Component));

  var styles = {
    centerHeader: {
      marginTop: 10,
      fontSize: 16,
      marginLeft: 15
    },
    buttonStyle: {
      width: 200,
      height: 45,
      borderColor: 'transparent',
      borderWidth: 0,
      borderRadius: 5
    }
  };
  exports.default = ReportForm;
});