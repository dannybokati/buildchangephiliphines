__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-app-intro/AppIntro.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _assignDeep = _require(_dependencyMap[2], "assign-deep");

  var _assignDeep2 = _interopRequireDefault(_assignDeep);

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[4], "react-native");

  var _reactNativeSwiper = _require(_dependencyMap[5], "react-native-swiper");

  var _reactNativeSwiper2 = _interopRequireDefault(_reactNativeSwiper);

  var _DoneButton = _require(_dependencyMap[6], "./components/DoneButton");

  var _DoneButton2 = _interopRequireDefault(_DoneButton);

  var _SkipButton = _require(_dependencyMap[7], "./components/SkipButton");

  var _SkipButton2 = _interopRequireDefault(_SkipButton);

  var _Dots = _require(_dependencyMap[8], "./components/Dots");

  var _Dots2 = _interopRequireDefault(_Dots);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    AppIntro: {
      displayName: "AppIntro"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-app-intro/AppIntro.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var windowsWidth = _reactNative.Dimensions.get('window').width;

  var windowsHeight = _reactNative.Dimensions.get('window').height;

  var defaulStyles = {
    header: {
      flex: 0.5,
      justifyContent: 'center',
      alignItems: 'center'
    },
    pic: {
      width: 150,
      height: 150
    },
    info: {
      flex: 0.5,
      alignItems: 'center',
      padding: 30
    },
    slide: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#9DD6EB',
      padding: 15
    },
    title: {
      color: '#fff',
      fontSize: 30,
      paddingBottom: 20
    },
    description: {
      color: '#fff',
      fontSize: 20
    },
    controllText: {
      color: '#fff',
      fontSize: 22,
      fontWeight: 'bold'
    },
    dotStyle: {
      backgroundColor: 'rgba(255,255,255,.3)',
      width: 13,
      height: 13,
      borderRadius: 7,
      marginLeft: 7,
      marginRight: 7,
      marginTop: 7,
      marginBottom: 7
    },
    activeDotStyle: {
      backgroundColor: '#fff'
    },
    paginationContainer: {
      position: 'absolute',
      bottom: 25,
      left: 0,
      right: 0,
      flexDirection: 'row',
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    dotContainer: {
      flex: 0.6,
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    btnContainer: {
      flex: 0.2,
      justifyContent: 'center',
      alignItems: 'center',
      height: 50
    },
    nextButtonText: {
      fontSize: 25,
      fontWeight: 'bold',
      fontFamily: 'Arial'
    },
    full: {
      height: 80,
      width: 100,
      justifyContent: 'center',
      alignItems: 'center'
    }
  };

  var AppIntro = _wrapComponent("AppIntro")(function (_Component) {
    _inherits(AppIntro, _Component);

    function AppIntro(props) {
      _classCallCheck(this, AppIntro);

      var _this = _possibleConstructorReturn(this, (AppIntro.__proto__ || Object.getPrototypeOf(AppIntro)).call(this, props));

      _this.onNextBtnClick = function (context) {
        if (context.state.isScrolling || context.state.total < 2) return;
        var state = context.state;
        var diff = (context.props.loop ? 1 : 0) + 1 + context.state.index;
        var x = 0;
        if (state.dir === 'x') x = diff * state.width;

        if (_reactNative.Platform.OS === 'ios') {
          context.refs.scrollView.scrollTo({
            y: 0,
            x: x
          });
        } else {
          context.refs.scrollView.setPage(diff);
          context.onScrollEnd({
            nativeEvent: {
              position: diff
            }
          });
        }

        _this.props.onNextBtnClick(context.state.index);
      };

      _this.setDoneBtnOpacity = function (value) {
        _reactNative.Animated.timing(_this.state.doneFadeOpacity, {
          toValue: value
        }).start();
      };

      _this.setSkipBtnOpacity = function (value) {
        _reactNative.Animated.timing(_this.state.skipFadeOpacity, {
          toValue: value
        }).start();
      };

      _this.setNextOpacity = function (value) {
        _reactNative.Animated.timing(_this.state.nextOpacity, {
          toValue: value
        }).start();
      };

      _this.getTransform = function (index, offset, level) {
        var isFirstPage = index === 0;
        var statRange = isFirstPage ? 0 : windowsWidth * (index - 1);
        var endRange = isFirstPage ? windowsWidth : windowsWidth * index;
        var startOpacity = isFirstPage ? 1 : 0;
        var endOpacity = isFirstPage ? 1 : 1;
        var leftPosition = isFirstPage ? 0 : windowsWidth / 3;
        var rightPosition = isFirstPage ? -windowsWidth / 3 : 0;
        var transform = [{
          transform: [{
            translateX: _this.state.parallax.interpolate({
              inputRange: [statRange, endRange],
              outputRange: [isFirstPage ? leftPosition : leftPosition - offset * level, isFirstPage ? rightPosition + offset * level : rightPosition]
            })
          }]
        }, {
          opacity: _this.state.parallax.interpolate({
            inputRange: [statRange, endRange],
            outputRange: [startOpacity, endOpacity]
          })
        }];
        return {
          transform: transform
        };
      };

      _this.renderPagination = function (index, total, context) {
        var isDoneBtnShow = void 0;
        var isSkipBtnShow = void 0;

        if (index === total - 1) {
          _this.setDoneBtnOpacity(1);

          _this.setSkipBtnOpacity(0);

          _this.setNextOpacity(0);

          isDoneBtnShow = true;
          isSkipBtnShow = false;
        } else {
          _this.setDoneBtnOpacity(0);

          _this.setSkipBtnOpacity(1);

          _this.setNextOpacity(1);

          isDoneBtnShow = false;
          isSkipBtnShow = true;
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [_this.styles.paginationContainer],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 208
            }
          },
          _this.props.showSkipButton ? _react3.default.createElement(_SkipButton2.default, _extends({}, _this.props, _this.state, {
            isSkipBtnShow: isSkipBtnShow,
            styles: _this.styles,
            onSkipBtnClick: function onSkipBtnClick() {
              return _this.props.onSkipBtnClick(index);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 209
            }
          })) : _react3.default.createElement(_reactNative.View, {
            style: _this.styles.btnContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 215
            }
          }),
          _this.props.showDots && (0, _Dots2.default)(index, total, _extends({}, _this.props, {
            styles: _this.styles
          })),
          _this.props.showDoneButton ? _react3.default.createElement(_DoneButton2.default, _extends({}, _this.props, _this.state, {
            isDoneBtnShow: isDoneBtnShow,
            styles: _this.styles,
            onNextBtnClick: _this.onNextBtnClick.bind(_this, context),
            onDoneBtnClick: _this.props.onDoneBtnClick,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 221
            }
          })) : _react3.default.createElement(_reactNative.View, {
            style: _this.styles.btnContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 228
            }
          })
        );
      };

      _this.renderBasicSlidePage = function (index, _ref) {
        var title = _ref.title,
            description = _ref.description,
            img = _ref.img,
            imgStyle = _ref.imgStyle,
            backgroundColor = _ref.backgroundColor,
            fontColor = _ref.fontColor,
            level = _ref.level;

        var AnimatedStyle1 = _this.getTransform(index, 10, level);

        var AnimatedStyle2 = _this.getTransform(index, 0, level);

        var AnimatedStyle3 = _this.getTransform(index, 15, level);

        var imgSource = typeof img === 'string' ? {
          uri: img
        } : img;

        var pageView = _react3.default.createElement(
          _reactNative.View,
          {
            style: [_this.styles.slide, {
              backgroundColor: backgroundColor
            }],
            showsPagination: false,
            key: index,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 248
            }
          },
          _react3.default.createElement(
            _reactNative.Animated.View,
            {
              style: [_this.styles.header].concat(_toConsumableArray(AnimatedStyle1.transform)),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 249
              }
            },
            _react3.default.createElement(_reactNative.Image, {
              style: imgStyle,
              source: imgSource,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 250
              }
            })
          ),
          _react3.default.createElement(
            _reactNative.View,
            {
              style: _this.styles.info,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 252
              }
            },
            _react3.default.createElement(
              _reactNative.Animated.View,
              {
                style: AnimatedStyle2.transform,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 253
                }
              },
              _react3.default.createElement(
                _reactNative.Text,
                {
                  style: [_this.styles.title, {
                    color: fontColor
                  }],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 254
                  }
                },
                title
              )
            ),
            _react3.default.createElement(
              _reactNative.Animated.View,
              {
                style: AnimatedStyle3.transform,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 256
                }
              },
              _react3.default.createElement(
                _reactNative.Text,
                {
                  style: [_this.styles.description, {
                    color: fontColor
                  }],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 257
                  }
                },
                description
              )
            )
          )
        );

        return pageView;
      };

      _this.renderChild = function (children, pageIndex, index) {
        var level = children.props.level || 0;

        var _this$getTransform = _this.getTransform(pageIndex, 10, level),
            transform = _this$getTransform.transform;

        var root = children.props.children;
        var nodes = children;

        if (Array.isArray(root)) {
          nodes = root.map(function (node, i) {
            return _this.renderChild(node, pageIndex, index + "_" + i);
          });
        }

        var animatedChild = children;

        if (level !== 0) {
          animatedChild = _react3.default.createElement(
            _reactNative.Animated.View,
            {
              key: index,
              style: [children.props.style, transform],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 276
              }
            },
            nodes
          );
        } else {
          animatedChild = _react3.default.createElement(
            _reactNative.View,
            {
              key: index,
              style: children.props.style,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 282
              }
            },
            nodes
          );
        }

        return animatedChild;
      };

      _this.styles = _reactNative.StyleSheet.create((0, _assignDeep2.default)({}, defaulStyles, props.customStyles));
      _this.state = {
        skipFadeOpacity: new _reactNative.Animated.Value(1),
        doneFadeOpacity: new _reactNative.Animated.Value(0),
        nextOpacity: new _reactNative.Animated.Value(1),
        parallax: new _reactNative.Animated.Value(0)
      };
      return _this;
    }

    _createClass(AppIntro, [{
      key: "shadeStatusBarColor",
      value: function shadeStatusBarColor(color, percent) {
        var first = parseInt(color.slice(1), 16);
        var black = first & 0x0000FF;
        var green = first >> 8 & 0x00FF;
        var percentage = percent < 0 ? percent * -1 : percent;
        var red = first >> 16;
        var theme = percent < 0 ? 0 : 255;
        var finalColor = (0x1000000 + (Math.round((theme - red) * percentage) + red) * 0x10000 + (Math.round((theme - green) * percentage) + green) * 0x100 + (Math.round((theme - black) * percentage) + black)).toString(16).slice(1);
        return "#" + finalColor;
      }
    }, {
      key: "isToTintStatusBar",
      value: function isToTintStatusBar() {
        return this.props.pageArray && this.props.pageArray.length > 0 && _reactNative.Platform.OS === 'android';
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var childrens = this.props.children;
        var pageArray = this.props.pageArray;
        var pages = [];
        var androidPages = null;

        if (pageArray.length > 0) {
          pages = pageArray.map(function (page, i) {
            return _this2.renderBasicSlidePage(i, page);
          });
        } else {
          if (_reactNative.Platform.OS === 'ios') {
            pages = childrens.map(function (children, i) {
              return _this2.renderChild(children, i, i);
            });
          } else {
            androidPages = childrens.map(function (children, i) {
              var _getTransform = _this2.getTransform(i, -windowsWidth / 3 * 2, 1),
                  transform = _getTransform.transform;

              pages.push(_react3.default.createElement(_reactNative.View, {
                key: i,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 319
                }
              }));
              return _react3.default.createElement(
                _reactNative.Animated.View,
                {
                  key: i,
                  style: [{
                    position: 'absolute',
                    height: windowsHeight,
                    width: windowsWidth,
                    top: 0
                  }, _extends({}, transform[0])],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 321
                  }
                },
                _this2.renderChild(children, i, i)
              );
            });
          }
        }

        if (this.isToTintStatusBar()) {
          _reactNative.StatusBar.setBackgroundColor(this.shadeStatusBarColor(this.props.pageArray[0].backgroundColor, -0.3), false);
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 342
            }
          },
          androidPages,
          _react3.default.createElement(
            _reactNativeSwiper2.default,
            {
              loop: false,
              index: this.props.defaultIndex,
              renderPagination: this.renderPagination,
              onMomentumScrollEnd: function onMomentumScrollEnd(e, state) {
                if (_this2.isToTintStatusBar()) {
                  _reactNative.StatusBar.setBackgroundColor(_this2.shadeStatusBarColor(_this2.props.pageArray[state.index].backgroundColor, -0.3), false);
                }

                _this2.props.onSlideChange(state.index, state.total);
              },
              onScroll: _reactNative.Animated.event([{
                x: this.state.parallax
              }]),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 344
              }
            },
            pages
          )
        );
      }
    }]);

    return AppIntro;
  }(_react2.Component));

  exports.default = AppIntro;
  AppIntro.propTypes = {
    dotColor: _propTypes2.default.string,
    activeDotColor: _propTypes2.default.string,
    rightTextColor: _propTypes2.default.string,
    leftTextColor: _propTypes2.default.string,
    onSlideChange: _propTypes2.default.func,
    onSkipBtnClick: _propTypes2.default.func,
    onDoneBtnClick: _propTypes2.default.func,
    onNextBtnClick: _propTypes2.default.func,
    pageArray: _propTypes2.default.array,
    doneBtnLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
    skipBtnLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
    nextBtnLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
    customStyles: _propTypes2.default.object,
    defaultIndex: _propTypes2.default.number,
    showSkipButton: _propTypes2.default.bool,
    showDoneButton: _propTypes2.default.bool,
    showDots: _propTypes2.default.bool
  };
  AppIntro.defaultProps = {
    dotColor: 'rgba(255,255,255,.3)',
    activeDotColor: '#fff',
    rightTextColor: '#fff',
    leftTextColor: '#fff',
    pageArray: [],
    onSlideChange: function onSlideChange() {},
    onSkipBtnClick: function onSkipBtnClick() {},
    onDoneBtnClick: function onDoneBtnClick() {},
    onNextBtnClick: function onNextBtnClick() {},
    doneBtnLabel: 'Done',
    skipBtnLabel: 'Skip',
    nextBtnLabel: '›',
    defaultIndex: 0,
    showSkipButton: true,
    showDoneButton: true,
    showDots: true
  };
});