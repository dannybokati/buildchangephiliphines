__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-pdf/PinchZoomView.js";

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        PinchZoomView: {
            displayName: "PinchZoomView"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-pdf/PinchZoomView.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var PinchZoomView = _wrapComponent("PinchZoomView")((_temp = _class = function (_Component) {
        _inherits(PinchZoomView, _Component);

        function PinchZoomView(props) {
            _classCallCheck(this, PinchZoomView);

            var _this = _possibleConstructorReturn(this, (PinchZoomView.__proto__ || Object.getPrototypeOf(PinchZoomView)).call(this, props));

            _this._handleStartShouldSetPanResponder = function (e, gestureState) {
                return false;
            };

            _this._handleMoveShouldSetPanResponder = function (e, gestureState) {
                return _this.props.scalable && (e.nativeEvent.changedTouches.length >= 2 || gestureState.numberActiveTouches >= 2);
            };

            _this._handlePanResponderGrant = function (e, gestureState) {
                if (e.nativeEvent.changedTouches.length >= 2 || gestureState.numberActiveTouches >= 2) {
                    var dx = Math.abs(e.nativeEvent.touches[0].pageX - e.nativeEvent.touches[1].pageX);
                    var dy = Math.abs(e.nativeEvent.touches[0].pageY - e.nativeEvent.touches[1].pageY);
                    _this.distant = Math.sqrt(dx * dx + dy * dy);
                }
            };

            _this._handlePanResponderEnd = function (e, gestureState) {
                _this.distant = 0;
            };

            _this._handlePanResponderTerminate = function (e, gestureState) {
                _this.distant = 0;
            };

            _this._handlePanResponderMove = function (e, gestureState) {
                if ((e.nativeEvent.changedTouches.length >= 2 || gestureState.numberActiveTouches >= 2) && _this.distant > 100) {
                    var dx = Math.abs(e.nativeEvent.touches[0].pageX - e.nativeEvent.touches[1].pageX);
                    var dy = Math.abs(e.nativeEvent.touches[0].pageY - e.nativeEvent.touches[1].pageY);
                    var distant = Math.sqrt(dx * dx + dy * dy);
                    var scale = distant / _this.distant;
                    var pageX = (e.nativeEvent.touches[0].pageX + e.nativeEvent.touches[1].pageX) / 2;
                    var pageY = (e.nativeEvent.touches[0].pageY + e.nativeEvent.touches[1].pageY) / 2;
                    var pinchInfo = {
                        scale: scale,
                        pageX: pageX,
                        pageY: pageY
                    };

                    _this.props.onScaleChanged(pinchInfo);

                    _this.distant = distant;
                }
            };

            _this.state = {};
            _this.distant = 0;
            return _this;
        }

        _createClass(PinchZoomView, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                this.gestureHandlers = _reactNative.PanResponder.create({
                    onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,
                    onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(evt, gestureState) {
                        return true;
                    },
                    onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
                    onPanResponderGrant: this._handlePanResponderGrant,
                    onPanResponderMove: this._handlePanResponderMove,
                    onPanResponderRelease: this._handlePanResponderEnd,
                    onPanResponderTerminationRequest: function onPanResponderTerminationRequest(evt) {
                        return false;
                    },
                    onPanResponderTerminate: this._handlePanResponderTerminate,
                    onShouldBlockNativeResponder: function onShouldBlockNativeResponder(evt) {
                        return true;
                    }
                });
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(
                    _reactNative.View,
                    _extends({}, this.props, this.gestureHandlers.panHandlers, {
                        style: [styles.container, this.props.style],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 114
                        }
                    }),
                    this.props.children
                );
            }
        }]);

        return PinchZoomView;
    }(_react2.Component), _class.propTypes = _extends({}, _reactNative.ViewPropTypes, {
        scalable: _propTypes2.default.bool,
        onScaleChanged: _propTypes2.default.func
    }), _class.defaultProps = {
        scalable: true,
        onScaleChanged: function onScaleChanged(scale) {}
    }, _temp));

    exports.default = PinchZoomView;

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center'
        }
    });
});