__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var isPrimitive = _require(_dependencyMap[0], 'is-primitive');

  var assignSymbols = _require(_dependencyMap[1], 'assign-symbols');

  var typeOf = _require(_dependencyMap[2], 'kind-of');

  function assign(target) {
    target = target || {};
    var len = arguments.length,
        i = 0;

    if (len === 1) {
      return target;
    }

    while (++i < len) {
      var val = arguments[i];

      if (isPrimitive(target)) {
        target = val;
      }

      if (isObject(val)) {
        extend(target, val);
      }
    }

    return target;
  }

  function extend(target, obj) {
    assignSymbols(target, obj);

    for (var key in obj) {
      if (key !== '__proto__' && hasOwn(obj, key)) {
        var val = obj[key];

        if (isObject(val)) {
          if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {
            target[key] = val;
          }

          target[key] = assign(target[key] || {}, val);
        } else {
          target[key] = val;
        }
      }
    }

    return target;
  }

  function isObject(obj) {
    return typeOf(obj) === 'object' || typeOf(obj) === 'function';
  }

  function hasOwn(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }

  module.exports = assign;
});