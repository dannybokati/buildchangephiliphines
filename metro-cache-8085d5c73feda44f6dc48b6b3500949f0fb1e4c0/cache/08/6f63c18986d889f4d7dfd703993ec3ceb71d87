__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialState = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports.default = function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments[1];

    switch (action.type) {
      case _actionTypes2.default.CONNECTION_CHANGE:
        return _extends({}, state, {
          isConnected: action.payload
        });

      case _actionTypes2.default.FETCH_OFFLINE_MODE:
        return handleOfflineAction(state, action);

      case _actionTypes2.default.REMOVE_FROM_ACTION_QUEUE:
        return handleRemoveActionFromQueue(state, action.payload);

      case _actionTypes2.default.DISMISS_ACTIONS_FROM_QUEUE:
        return handleDismissActionsFromQueue(state, action.payload);

      default:
        return state;
    }
  };

  var _lodash = _require(_dependencyMap[0], "lodash");

  var _actionTypes = _require(_dependencyMap[1], "./actionTypes");

  var _actionTypes2 = _interopRequireDefault(_actionTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var initialState = exports.initialState = {
    isConnected: true,
    actionQueue: []
  };

  function handleOfflineAction(state, _ref) {
    var _ref$payload = _ref.payload;
    _ref$payload = _ref$payload === undefined ? {} : _ref$payload;
    var prevAction = _ref$payload.prevAction,
        prevThunk = _ref$payload.prevThunk,
        meta = _ref.meta;
    var isActionToRetry = typeof prevAction === 'object' && (0, _lodash.get)(meta, 'retry') === true;
    var isThunkToRetry = typeof prevThunk === 'function' && (0, _lodash.get)(prevThunk, 'meta.retry') === true;

    if (isActionToRetry || isThunkToRetry) {
      var actionToLookUp = prevAction || prevThunk;
      var actionWithMetaData = typeof actionToLookUp === 'object' ? _extends({}, actionToLookUp, {
        meta: meta
      }) : actionToLookUp;
      var similarActionQueued = (0, _lodash.find)(state.actionQueue, function (action) {
        return (0, _lodash.isEqual)(action, actionWithMetaData);
      });
      return _extends({}, state, {
        actionQueue: similarActionQueued ? [].concat(_toConsumableArray((0, _lodash.without)(state.actionQueue, similarActionQueued)), [actionWithMetaData]) : [].concat(_toConsumableArray(state.actionQueue), [actionWithMetaData])
      });
    }

    return state;
  }

  function handleRemoveActionFromQueue(state, action) {
    var similarActionQueued = (0, _lodash.find)(state.actionQueue, function (a) {
      return (0, _lodash.isEqual)(action, a);
    });
    return _extends({}, state, {
      actionQueue: (0, _lodash.without)(state.actionQueue, similarActionQueued)
    });
  }

  function handleDismissActionsFromQueue(state, triggerActionToDismiss) {
    var newActionQueue = state.actionQueue.filter(function (action) {
      var dismissArray = (0, _lodash.get)(action, 'meta.dismiss', []);
      return !dismissArray.includes(triggerActionToDismiss);
    });
    return _extends({}, state, {
      actionQueue: newActionQueue
    });
  }
});