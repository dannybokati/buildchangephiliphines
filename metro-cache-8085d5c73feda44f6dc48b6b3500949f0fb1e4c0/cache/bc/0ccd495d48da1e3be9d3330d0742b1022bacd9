__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ToggleCircle = undefined;

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/src/components/common/ToggleCircle.js";

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _reactNativeElements = _require(_dependencyMap[3], "react-native-elements");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        ToggleCircle: {
            displayName: "ToggleCircle"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/nishon/ReactNativeProject/buildchange-ph/src/components/common/ToggleCircle.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var ToggleCircle = _wrapComponent("ToggleCircle")(function (_Component) {
        _inherits(ToggleCircle, _Component);

        function ToggleCircle(props) {
            _classCallCheck(this, ToggleCircle);

            var _this = _possibleConstructorReturn(this, (ToggleCircle.__proto__ || Object.getPrototypeOf(ToggleCircle)).call(this, props));

            _this.state = {
                isActivated: false
            };
            return _this;
        }

        _createClass(ToggleCircle, [{
            key: "onToggleButtonPress",
            value: function onToggleButtonPress() {
                this.setState(_extends({}, this.state, {
                    isActivated: !this.state.isActivated
                }));
                console.log(this.state.isActivated);
            }
        }, {
            key: "render",
            value: function render() {
                var filledCircle = _react3.default.createElement(
                    _reactNative.Text,
                    {
                        style: styles.circleGreenFilled,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 19
                        }
                    },
                    "\u2713"
                );

                var emptyCircle = _react3.default.createElement(_reactNative.Text, {
                    style: styles.circleGreenEmpty,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 20
                    }
                });

                return _react3.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: this.onToggleButtonPress.bind(this),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 24
                        }
                    },
                    this.state.isActivated ? filledCircle : emptyCircle
                );
            }
        }]);

        return ToggleCircle;
    }(_react2.Component));

    exports.default = ToggleCircle;
    var styles = {
        circleGreenFilled: {
            borderWidth: 1,
            color: '#fff',
            backgroundColor: '#8CC63E',
            borderColor: '#8CC63E',
            fontSize: 36,
            textAlign: 'center',
            marginLeft: 16,
            marginTop: 16,
            marginBottom: 16,
            width: 55,
            height: 55,
            borderRadius: 55 / 2
        },
        circleGreenEmpty: {
            borderWidth: 1,
            color: '#8CC63E',
            borderColor: '#8CC63E',
            fontSize: 36,
            textAlign: 'center',
            marginLeft: 16,
            marginTop: 16,
            marginBottom: 16,
            width: 55,
            height: 55,
            borderRadius: 55 / 2
        }
    };
    exports.ToggleCircle = ToggleCircle;
});