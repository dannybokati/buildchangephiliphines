__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.actionMap = undefined;

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _actionMap,
      _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-router-flux/src/navigationStore.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactNavigation = _require(_dependencyMap[3], "react-navigation");

  var _reactNavigationDeprecatedTabNavigator = _require(_dependencyMap[4], "react-navigation-deprecated-tab-navigator");

  var _propTypes = _require(_dependencyMap[5], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _Reducer = _require(_dependencyMap[6], "./Reducer");

  var _Reducer2 = _interopRequireDefault(_Reducer);

  var _ActionConst = _require(_dependencyMap[7], "./ActionConst");

  var ActionConst = _interopRequireWildcard(_ActionConst);

  var _Util = _require(_dependencyMap[8], "./Util");

  var _NavBar = _require(_dependencyMap[9], "./NavBar");

  var _LightboxRenderer = _require(_dependencyMap[10], "./LightboxRenderer");

  var _LightboxRenderer2 = _interopRequireDefault(_LightboxRenderer);

  var _menu_burger = _require(_dependencyMap[11], "../images/menu_burger.png");

  var _menu_burger2 = _interopRequireDefault(_menu_burger);

  var _Scene = _require(_dependencyMap[12], "./Scene");

  var _Scene2 = _interopRequireDefault(_Scene);

  var _State = _require(_dependencyMap[13], "./State");

  var _Modal = _require(_dependencyMap[14], "./Modal");

  var _Modal2 = _interopRequireDefault(_Modal);

  var _Lightbox = _require(_dependencyMap[15], "./Lightbox");

  var _Lightbox2 = _interopRequireDefault(_Lightbox);

  var _Drawer = _require(_dependencyMap[16], "./Drawer");

  var _Drawer2 = _interopRequireDefault(_Drawer);

  var _Tabs = _require(_dependencyMap[17], "./Tabs");

  var _Tabs2 = _interopRequireDefault(_Tabs);

  var _LegacyTabs = _require(_dependencyMap[18], "./LegacyTabs");

  var _LegacyTabs2 = _interopRequireDefault(_LegacyTabs);

  var _Overlay = _require(_dependencyMap[19], "./Overlay");

  var _Overlay2 = _interopRequireDefault(_Overlay);

  var _OverlayRenderer = _require(_dependencyMap[20], "./OverlayRenderer");

  var _OverlayRenderer2 = _interopRequireDefault(_OverlayRenderer);

  var _createStackNavigatorHOC = _require(_dependencyMap[21], "./createStackNavigatorHOC");

  var _createStackNavigatorHOC2 = _interopRequireDefault(_createStackNavigatorHOC);

  var _createTabNavigatorHOC = _require(_dependencyMap[22], "./createTabNavigatorHOC");

  var _createTabNavigatorHOC2 = _interopRequireDefault(_createTabNavigatorHOC);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var _components = {
    Wrapped: {
      displayName: "Wrapped",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-router-flux/src/navigationStore.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var RightNavBarButton = void 0;
  var LeftNavBarButton = void 0;
  var BackNavBarButton = void 0;
  var counter = 0;
  var actionMap = exports.actionMap = (_actionMap = {}, _defineProperty(_actionMap, ActionConst.JUMP, 'jump'), _defineProperty(_actionMap, ActionConst.PUSH, 'push'), _defineProperty(_actionMap, ActionConst.REPLACE, 'replace'), _defineProperty(_actionMap, ActionConst.BACK, 'pop'), _defineProperty(_actionMap, ActionConst.BACK_ACTION, 'pop'), _defineProperty(_actionMap, ActionConst.POP_TO, 'popTo'), _defineProperty(_actionMap, ActionConst.REFRESH, 'refresh'), _defineProperty(_actionMap, ActionConst.RESET, 'reset'), _defineProperty(_actionMap, ActionConst.PUSH_OR_POP, 'push'), _actionMap);
  var reservedKeys = ['addRef', 'back', 'children', 'create', 'dispatch', 'drawerClose', 'drawerOpen', 'execute', 'left', 'leftButton', 'navBar', 'navigate', 'on', 'onEnter', 'onExit', 'onLeft', 'onRight', 'pop', 'popTo', 'push', 'refresh', 'refs', 'removeRef', 'renderLeftButton', 'renderRightButton', 'renderTitle', 'replace', 'right', 'rightButton', 'run', 'setParams', 'title'];
  var dontInheritKeys = ['backToInitial', 'children', 'component', 'contentComponent', 'drawer', 'hideNavBar', 'hideTabBar', 'key', 'lightbox', 'modal', 'navigator', 'navTransparent', 'overlay', 'ref', 'style', 'tabBarComponent', 'tabs', 'title', 'type'];

  function getValue(value, params) {
    return value instanceof Function ? value(params) : value;
  }

  function getProperties() {
    var component = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var res = {};

    for (var _iterator = reservedKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var key = _ref;

      if (component[key]) {
        res[key] = component[key];
      }
    }

    delete res.children;
    return res;
  }

  function createTabBarOptions(_ref2) {
    var tabBarStyle = _ref2.tabBarStyle,
        activeTintColor = _ref2.activeTintColor,
        inactiveTintColor = _ref2.inactiveTintColor,
        activeBackgroundColor = _ref2.activeBackgroundColor,
        inactiveBackgroundColor = _ref2.inactiveBackgroundColor,
        showLabel = _ref2.showLabel,
        labelStyle = _ref2.labelStyle,
        tabStyle = _ref2.tabStyle,
        props = _objectWithoutProperties(_ref2, ["tabBarStyle", "activeTintColor", "inactiveTintColor", "activeBackgroundColor", "inactiveBackgroundColor", "showLabel", "labelStyle", "tabStyle"]);

    return _extends({}, props, {
      style: tabBarStyle,
      activeTintColor: activeTintColor,
      inactiveTintColor: inactiveTintColor,
      activeBackgroundColor: activeBackgroundColor,
      inactiveBackgroundColor: inactiveBackgroundColor,
      showLabel: showLabel,
      labelStyle: labelStyle,
      tabStyle: tabStyle
    });
  }

  function createNavigationOptions(params) {
    var back = params.back,
        backButtonImage = params.backButtonImage,
        backButtonTextStyle = params.backButtonTextStyle,
        backTitle = params.backTitle,
        backTitleEnabled = params.backTitleEnabled,
        backToInitial = params.backToInitial,
        legacy = params.legacy,
        component = params.component,
        drawerIcon = params.drawerIcon,
        drawerImage = params.drawerImage,
        drawerPosition = params.drawerPosition,
        getTitle = params.getTitle,
        headerLayoutPreset = params.headerLayoutPreset,
        headerStyle = params.headerStyle,
        headerTitleStyle = params.headerTitleStyle,
        hideDrawerButton = params.hideDrawerButton,
        hideNavBar = params.hideNavBar,
        hideTabBar = params.hideTabBar,
        icon = params.icon,
        init = params.init,
        left = params.left,
        leftButton = params.leftButton,
        leftButtonImage = params.leftButtonImage,
        leftButtonTextStyle = params.leftButtonTextStyle,
        leftTitle = params.leftTitle,
        navBar = params.navBar,
        navBarButtonColor = params.navBarButtonColor,
        navigationBarStyle = params.navigationBarStyle,
        navigationBarTitleImage = params.navigationBarTitleImage,
        navigationBarTitleImageStyle = params.navigationBarTitleImageStyle,
        navTransparent = params.navTransparent,
        onLeft = params.onLeft,
        onRight = params.onRight,
        panHandlers = params.panHandlers,
        renderBackButton = params.renderBackButton,
        renderNavigationBar = params.renderNavigationBar,
        renderTitle = params.renderTitle,
        right = params.right,
        rightButton = params.rightButton,
        rightButtonImage = params.rightButtonImage,
        rightButtonTextStyle = params.rightButtonTextStyle,
        rightTitle = params.rightTitle,
        tabBarIcon = params.tabBarIcon,
        tabBarLabel = params.tabBarLabel,
        title = params.title,
        titleStyle = params.titleStyle,
        props = _objectWithoutProperties(params, ["back", "backButtonImage", "backButtonTextStyle", "backTitle", "backTitleEnabled", "backToInitial", "legacy", "component", "drawerIcon", "drawerImage", "drawerPosition", "getTitle", "headerLayoutPreset", "headerStyle", "headerTitleStyle", "hideDrawerButton", "hideNavBar", "hideTabBar", "icon", "init", "left", "leftButton", "leftButtonImage", "leftButtonTextStyle", "leftTitle", "navBar", "navBarButtonColor", "navigationBarStyle", "navigationBarTitleImage", "navigationBarTitleImageStyle", "navTransparent", "onLeft", "onRight", "panHandlers", "renderBackButton", "renderNavigationBar", "renderTitle", "right", "rightButton", "rightButtonImage", "rightButtonTextStyle", "rightTitle", "tabBarIcon", "tabBarLabel", "title", "titleStyle"]);

    var NavBar = renderNavigationBar || navBar;

    if (component && component.navigationOptions) {
      return component.navigationOptions;
    }

    return function (_ref3) {
      var navigation = _ref3.navigation,
          screenProps = _ref3.screenProps;
      var navigationParams = navigation.state.params || {};

      var state = _extends({
        navigation: navigation
      }, params, navigationParams, screenProps);

      var res = _extends({}, props, {
        headerBackImage: navigationParams.backButtonImage || backButtonImage,
        headerBackTitle: getValue(navigationParams.backTitle || backTitle, state),
        headerBackTitleEnabled: navigationParams.backTitleEnabled || backTitleEnabled,
        headerLayoutPreset: navigationParams.headerLayoutPreset || headerLayoutPreset,
        headerLeft: getValue(navigationParams.left || left || leftButton || params.renderLeftButton, state),
        headerRight: getValue(navigationParams.right || right || rightButton || params.renderRightButton, state),
        headerStyle: getValue(navigationParams.headerStyle || headerStyle || navigationBarStyle, state),
        headerTintColor: navBarButtonColor || props.tintColor || navigationParams.tintColor || navigationParams.headerTintColor,
        headerTitle: getValue(navigationParams.renderTitle || renderTitle || params.renderTitle, state),
        headerTitleStyle: headerTitleStyle || titleStyle,
        title: getValue(navigationParams.title || title || getTitle, state)
      });

      var NavBarFromParams = navigationParams.renderNavigationBar || navigationParams.navBar;

      if (NavBarFromParams != null) {
        if (NavBarFromParams) {
          res.header = function (data) {
            return _react3.default.createElement(NavBarFromParams, _extends({
              navigation: navigation
            }, state, data, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 221
              }
            }));
          };
        }
      } else if (NavBar) {
        res.header = function (data) {
          return _react3.default.createElement(NavBar, _extends({
            navigation: navigation
          }, state, data, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 224
            }
          }));
        };
      }

      if (typeof navigationParams.panHandlers !== 'undefined') {
        if (navigationParams.panHandlers === null) {
          res.gesturesEnabled = false;
        }
      } else if (panHandlers === null) {
        res.gesturesEnabled = false;
      }

      if (navigationBarTitleImage) {
        res.headerTitle = _react3.default.createElement(_reactNative.Image, {
          source: navigationBarTitleImage,
          style: navigationBarTitleImageStyle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 236
          }
        });
      }

      if (tabBarLabel) {
        res.tabBarLabel = tabBarLabel;
      }

      if (tabBarIcon || icon) {
        var Icon = tabBarIcon || icon;

        res.tabBarIcon = function (data) {
          return _react3.default.createElement(Icon, _extends({}, state, data, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 245
            }
          }));
        };
      }

      var componentData = {};

      if (component) {
        var _arr = ['onRight', 'onLeft', 'rightButton', 'leftButton', 'leftTitle', 'rightTitle', 'rightButtonImage', 'leftButtonImage', 'rightButtonTextStyle', 'leftButtonTextStyle', 'rightButtonIconStyle', 'leftButtonIconStyle', 'leftButtonTintColor', 'rightButtonTintColor'];

        for (var _i2 = 0; _i2 < _arr.length; _i2++) {
          var key = _arr[_i2];

          if (component[key]) {
            componentData[key] = component[key];
          }
        }
      }

      if (rightButtonImage || rightTitle || params.renderRightButton || onRight || navigationParams.onRight || navigationParams.rightTitle || navigationParams.rightButtonImage || rightButtonTextStyle || (drawerImage || drawerIcon) && !hideDrawerButton && drawerPosition === 'right') {
        res.headerRight = getValue(navigationParams.right || navigationParams.rightButton || params.renderRightButton, _extends({}, navigationParams, screenProps)) || _react3.default.createElement(RightNavBarButton, _extends({
          navigation: navigation
        }, params, navigationParams, componentData, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 284
          }
        }));
      }

      if (leftButtonImage || backButtonImage || backTitle || leftTitle || params.renderLeftButton || leftButtonTextStyle || renderBackButton || backButtonTextStyle || onLeft || navigationParams.leftTitle || navigationParams.onLeft || navigationParams.leftButtonImage || navigationParams.backButtonImage || navigationParams.backTitle || (drawerImage || drawerIcon) && !hideDrawerButton && drawerPosition !== 'right') {
        var _leftButton = navigationParams.left || navigationParams.leftButton || params.renderLeftButton;

        res.headerLeft = getValue(_leftButton, _extends({}, params, navigationParams, screenProps)) || (onLeft && (leftTitle || navigationParams.leftTitle || leftButtonImage || navigationParams.leftButtonImage) || drawerImage || drawerIcon) && _react3.default.createElement(LeftNavBarButton, _extends({
          navigation: navigation
        }, params, navigationParams, componentData, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 308
          }
        })) || res.headerLeft || (init ? null : !_leftButton && renderBackButton && renderBackButton(state) || !_leftButton && _react3.default.createElement(BackNavBarButton, _extends({
          navigation: navigation
        }, state, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 311
          }
        }))) || null;
      }

      if (back) {
        res.headerLeft = renderBackButton && renderBackButton(state) || _react3.default.createElement(BackNavBarButton, _extends({
          navigation: navigation
        }, state, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 316
          }
        }));
      }

      if (typeof navigationParams.left !== 'undefined' || typeof navigationParams.leftButton !== 'undefined' || typeof navigationParams.renderLeftButton !== 'undefined') {
        if (navigationParams.left === null || navigationParams.leftButton === null || navigationParams.renderLeftButton === null) {
          res.headerLeft = null;
        }
      }

      if (navigationParams.hideTabBar != null) {
        if (navigationParams.hideTabBar) {
          res.tabBarVisible = false;
        }
      } else if (hideTabBar) {
        res.tabBarVisible = false;
      }

      if (navigationParams.hideNavBar != null) {
        if (navigationParams.hideNavBar) {
          res.header = null;
        }
      } else if (hideNavBar) {
        res.header = null;
      }

      if (navTransparent) {
        res.headerTransparent = true;
        res.headerStyle = {
          marginTop: _reactNative.StatusBar.currentHeight
        };
      }

      if (!legacy && backToInitial) {
        var userDefinedTabBarOnPress = res.tabBarOnPress;

        res.tabBarOnPress = function (data) {
          if (userDefinedTabBarOnPress) {
            console.warn('backToInitial and tabBarOnPress were both defined and might cause unexpected navigation behaviors. I hope you know what you are doing ;-)');
            userDefinedTabBarOnPress(data);
          }

          if (data.navigation && data.navigation.state.index !== 0) {
            data.navigation.dispatch(_reactNavigation.StackActions.popToTop());
          } else {
            data.defaultHandler();
          }
        };
      }

      return res;
    };
  }

  function originalRouteName(routeName) {
    if (routeName.startsWith('_')) {
      return routeName.substring(1);
    }

    return routeName;
  }

  function isStatelessComponent(Component) {
    return !Component.prototype || typeof Component.prototype.render !== 'function';
  }

  function extendProps(props, store) {
    if (!props) {
      return {};
    }

    var res = _extends({}, props);

    var _loop = function _loop(transition) {
      if (reservedKeys.indexOf(transition) === -1 && transition.startsWith('on') && transition.charAt(2) >= 'A' && transition.charAt(2) <= 'Z' && typeof props[transition] === 'string') {
        if (store[props[transition]]) {
          res[transition] = function (params) {
            return store[props[transition]](params);
          };
        }
      }
    };

    for (var _iterator2 = Object.keys(props), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref4;

      if (_isArray2) {
        if (_i3 >= _iterator2.length) break;
        _ref4 = _iterator2[_i3++];
      } else {
        _i3 = _iterator2.next();
        if (_i3.done) break;
        _ref4 = _i3.value;
      }

      var transition = _ref4;

      _loop(transition);
    }

    return res;
  }

  function createWrapper(Component, wrapBy, store) {
    if (!Component) {
      return null;
    }

    var wrapper = wrapBy || function (props) {
      return props;
    };

    if (!isStatelessComponent(Component)) {
      var _class, _temp;

      var Wrapped = _wrapComponent("Wrapped")((_temp = _class = function (_React$Component) {
        _inherits(Wrapped, _React$Component);

        function Wrapped() {
          _classCallCheck(this, Wrapped);

          var _this = _possibleConstructorReturn(this, (Wrapped.__proto__ || Object.getPrototypeOf(Wrapped)).call(this));

          _this.onRef = _this.onRef.bind(_this);
          return _this;
        }

        _createClass(Wrapped, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            var navigation = this.props.navigation;

            if (this.ref && navigation && navigation.state && navigation.state.routeName) {
              store.addRef(originalRouteName(navigation.state.routeName), this.ref);
            }

            if (this.ref && this.ref.onEnter) {
              this.ref.onEnter(navigation && navigation.state);
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            var navigation = this.props.navigation;

            if (this.ref && navigation && navigation.state && navigation.state.routeName) {
              store.deleteRef(originalRouteName(navigation.state.routeName));
            }

            if (this.ref && this.ref.onExit) {
              this.ref.onExit(navigation && navigation.state);
            }

            this.ref = null;
          }
        }, {
          key: "onRef",
          value: function onRef(ref) {
            this.ref = ref;
          }
        }, {
          key: "render",
          value: function render() {
            var navigation = this.props.navigation;

            if (!navigation || !navigation.state) {
              return _react3.default.createElement(Component, _extends({
                ref: this.onRef
              }, this.props, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 443
                }
              }));
            }

            return _react3.default.createElement(Component, _extends({
              ref: this.onRef
            }, this.props, extendProps(navigation.state.params, store), {
              name: navigation.state.routeName,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 445
              }
            }));
          }
        }]);

        return Wrapped;
      }(_react3.default.Component), _class.propTypes = {
        navigation: _propTypes2.default.shape().isRequired
      }, _temp));

      return wrapper(Wrapped);
    }

    function StatelessWrapped(_ref5) {
      var navigation = _ref5.navigation,
          props = _objectWithoutProperties(_ref5, ["navigation"]);

      return _react3.default.createElement(Component, _extends({}, props, {
        navigation: navigation
      }, extendProps(navigation.state.params, store), {
        name: navigation.state.routeName,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 453
        }
      }));
    }

    StatelessWrapped.propTypes = {
      navigation: _propTypes2.default.shape().isRequired
    };
    return wrapper(StatelessWrapped);
  }

  function filterParam() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (data.toString() !== '[object Object]') {
      return {
        data: data
      };
    }

    var proto = (data || {}).constructor.name;

    if (!data || proto !== 'Object') {
      return {};
    }

    return data;
  }

  function uniteParams(routeName, params) {
    var res = {};

    for (var _iterator3 = params, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref6;

      if (_isArray3) {
        if (_i4 >= _iterator3.length) break;
        _ref6 = _iterator3[_i4++];
      } else {
        _i4 = _iterator3.next();
        if (_i4.done) break;
        _ref6 = _i4.value;
      }

      var param = _ref6;

      if (param) {
        res = _extends({}, res, filterParam(param));
      }
    }

    res.routeName = routeName;
    return res;
  }

  var defaultSuccess = function defaultSuccess() {};

  var defaultFailure = function defaultFailure() {};

  var NavigationStore = function () {
    function NavigationStore() {
      var _this2 = this;

      _classCallCheck(this, NavigationStore);

      this.getStateForAction = null;
      this.reducer = null;
      this._navigator = null;
      this.externalDispatch = null;
      this.externalState = null;
      this.prevState = null;
      this.externalAction = {};
      this.refs = {};
      this.states = {};

      this.setCustomReducer = function (Navigator) {
        _this2.getStateForAction = Navigator.router.getStateForAction;
        var reducer = (0, _Reducer2.default)(_this2);

        Navigator.router.getStateForAction = function (cmd, state) {
          return _this2.reducer ? _this2.reducer(state, cmd) : reducer(state, cmd);
        };
      };

      this.onEnterHandler = function _callee(currentScene) {
        var handler, success, failure, res;
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this2.states[currentScene]) {
                  _context.next = 15;
                  break;
                }

                handler = _this2[currentScene + _Util.OnEnter];
                success = _this2.states[currentScene].success || defaultSuccess;
                failure = _this2.states[currentScene].failure || defaultFailure;

                if (!handler) {
                  _context.next = 15;
                  break;
                }

                _context.prev = 5;
                _context.next = 8;
                return regeneratorRuntime.awrap(handler(_this2.currentParams, _this2.state));

              case 8:
                res = _context.sent;

                if (res) {
                  success(res);
                } else {
                  failure();
                }

                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](5);
                failure({
                  error: _context.t0.message
                });

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2, [[5, 12]]);
      };

      this.onExitHandler = function (prevScene) {
        if (prevScene) {
          var exitHandler = _this2[prevScene + _Util.OnExit];

          if (exitHandler) {
            try {
              var res = exitHandler(_this2.state);

              if (res instanceof Promise) {
                res.then(defaultSuccess, defaultFailure);
              }
            } catch (e) {
              console.error('Error during onExit handler:', e);
            }
          }
        }
      };

      this.onNavigationStateChange = function _callee2(prevState, currentState, action) {
        var activeState, currentScene, routeName;
        return regeneratorRuntime.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this2.state = currentState;
                _this2.prevState = prevState;
                activeState = (0, _State.getActiveState)(_this2.state);
                currentScene = activeState.routeName;
                _this2.currentParams = _extends({}, activeState.params, action.params);
                _this2.currentScene = currentScene;
                _this2.prevScene = _this2.prevState ? (0, _State.getActiveState)(_this2.prevState).routeName : null;

                if (_this2.currentScene !== _this2.prevScene) {
                  _this2.onExitHandler(_this2.prevScene);

                  setTimeout(function () {
                    return _this2.dispatch({
                      type: ActionConst.FOCUS,
                      routeName: _this2.currentScene,
                      params: _this2.currentParams
                    });
                  });

                  _this2.onEnterHandler(currentScene);
                } else {
                  routeName = (0, _State.getRouteNameByKey)(_this2.state, action.key);

                  if (action.type === 'Navigation/DRAWER_OPENED') {
                    _this2.onEnterHandler(routeName);
                  } else if (action.type === 'Navigation/DRAWER_CLOSED') {
                    _this2.onExitHandler(routeName);
                  }
                }

                if (_this2.onStateChange) {
                  _this2.onStateChange(prevState, currentState, action);
                }

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, null, _this2);
      };

      this.setTopLevelNavigator = function (navigatorRef) {
        _this2._navigator = navigatorRef;
      };

      this.addRef = function (name, ref) {
        _this2.refs[name] = ref;
      };

      this.deleteRef = function (name) {
        delete _this2.refs[name];
      };

      this.create = function (scene) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var wrapBy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (props) {
          return props;
        };
        (0, _Util.assert)(!Array.isArray(scene), 'Router should contain only one scene, please wrap your scenes with root Scene ');
        RightNavBarButton = wrapBy(_NavBar.RightButton);
        LeftNavBarButton = wrapBy(_NavBar.LeftButton);
        BackNavBarButton = wrapBy(_NavBar.BackButton);

        var Navigator = _this2.processScene(scene, params, [], wrapBy);

        _this2.onNavigationStateChange(null, Navigator.router.getStateForAction(_reactNavigation.NavigationActions.init()), _reactNavigation.NavigationActions.init());

        _this2.setCustomReducer(Navigator);

        return Navigator;
      };

      this.processScene = function (scene) {
        var inheritProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _ref8;

        var clones = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var wrapBy = arguments[3];
        (0, _Util.assert)(scene.props, 'props should be defined');

        if (!scene.props.children) {
          return null;
        }

        var res = {};
        var order = [];

        var _scene$props = scene.props,
            navigator = _scene$props.navigator,
            renderer = _scene$props.renderer,
            contentComponent = _scene$props.contentComponent,
            drawerWidth = _scene$props.drawerWidth,
            drawerLockMode = _scene$props.drawerLockMode,
            tabBarPosition = _scene$props.tabBarPosition,
            lazy = _scene$props.lazy,
            duration = _scene$props.duration,
            parentProps = _objectWithoutProperties(_scene$props, ["navigator", "renderer", "contentComponent", "drawerWidth", "drawerLockMode", "tabBarPosition", "lazy", "duration"]);

        var legacy = parentProps.legacy,
            tabs = parentProps.tabs,
            modal = parentProps.modal,
            lightbox = parentProps.lightbox,
            overlay = parentProps.overlay,
            drawer = parentProps.drawer,
            transitionConfig = parentProps.transitionConfig,
            tabBarComponent = parentProps.tabBarComponent;

        if (scene.type === _Modal2.default) {
          modal = true;
        } else if (scene.type === _Drawer2.default) {
          drawer = true;
        } else if (scene.type === _Lightbox2.default) {
          lightbox = true;
        } else if (scene.type === _Tabs2.default) {
          tabs = true;
        } else if (scene.type === _LegacyTabs2.default) {
          tabs = true;
          legacy = true;
        } else if (scene.type === _Overlay2.default) {
          overlay = true;
        }

        if (duration !== undefined && !transitionConfig) {
          transitionConfig = function transitionConfig() {
            return {
              transitionSpec: {
                duration: duration,
                timing: _reactNative.Animated.timing,
                easing: _reactNative.Easing.step0
              }
            };
          };
        }

        var commonProps = _extends({}, inheritProps, parentProps);

        delete commonProps.children;
        delete commonProps.component;

        for (var _iterator4 = Object.keys(commonProps), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {
          var _ref7;

          if (_isArray4) {
            if (_i5 >= _iterator4.length) break;
            _ref7 = _iterator4[_i5++];
          } else {
            _i5 = _iterator4.next();
            if (_i5.done) break;
            _ref7 = _i5.value;
          }

          var pkey = _ref7;

          if (dontInheritKeys.includes(pkey) && (pkey === 'type' || pkey === 'hideNavBar' || !parentProps[pkey])) {
            delete commonProps[pkey];
          }
        }

        if (drawer) {
          commonProps.drawerImage = commonProps.drawerImage || _menu_burger2.default;
        }

        var children = !Array.isArray(parentProps.children) ? [parentProps.children] : (_ref8 = []).concat.apply(_ref8, _toConsumableArray(parentProps.children));

        if (!drawer && !tabs && !overlay) {
          children.push.apply(children, _toConsumableArray(clones));
        }

        for (var _iterator5 = children, _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {
          var _ref9;

          if (_isArray5) {
            if (_i6 >= _iterator5.length) break;
            _ref9 = _iterator5[_i6++];
          } else {
            _i6 = _iterator5.next();
            if (_i6.done) break;
            _ref9 = _i6.value;
          }

          var child = _ref9;

          if (child && child.props.clone) {
            if (clones.indexOf(child) === -1) {
              clones.push(child);
            }
          }
        }

        var initialRouteName = void 0;
        var initialRouteParams = void 0;

        var _loop2 = function _loop2(_child) {
          if (!_child) {
            return "continue";
          }

          var key = _child.key || "key" + (counter += 1);
          var init = key === children[0].key;
          (0, _Util.assert)(reservedKeys.indexOf(key) === -1, "Scene name cannot be reserved word: " + _child.key);

          var _child$props = _child.props,
              component = _child$props.component,
              _child$props$type = _child$props.type,
              type = _child$props$type === undefined ? tabs || drawer ? 'jump' : 'push' : _child$props$type,
              path = _child$props.path,
              onEnter = _child$props.onEnter,
              onExit = _child$props.onExit,
              on = _child$props.on,
              failure = _child$props.failure,
              success = _child$props.success,
              wrap = _child$props.wrap,
              _child$props$initial = _child$props.initial,
              initial = _child$props$initial === undefined ? false : _child$props$initial,
              props = _objectWithoutProperties(_child$props, ["component", "type", "path", "onEnter", "onExit", "on", "failure", "success", "wrap", "initial"]);

          if (!_this2.states[key]) {
            _this2.states[key] = {};
          }

          for (var _iterator7 = Object.keys(props), _isArray7 = Array.isArray(_iterator7), _i8 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {
            var _ref11;

            if (_isArray7) {
              if (_i8 >= _iterator7.length) break;
              _ref11 = _iterator7[_i8++];
            } else {
              _i8 = _iterator7.next();
              if (_i8.done) break;
              _ref11 = _i8.value;
            }

            var transition = _ref11;

            if (reservedKeys.indexOf(transition) === -1 && props[transition] instanceof Function) {
              _this2.states[key][transition] = props[transition];
            }
          }

          delete props.children;

          if (success) {
            _this2.states[key].success = success instanceof Function ? success : function (args) {
              _this2[success](args);
            };
          }

          if (failure) {
            _this2.states[key].failure = failure instanceof Function ? failure : function (args) {
              _this2[failure](args);
            };
          }

          if (path) {
            _this2.states[key].path = path;
          }

          var screen = {
            screen: createWrapper(component, wrapBy, _this2) || _this2.processScene(_child, commonProps, clones) || lightbox && function () {
              return null;
            },
            navigationOptions: createNavigationOptions(_extends({}, commonProps, {
              hideNavBar: parentProps.hideNavBar
            }, getProperties(component), _child.props, {
              init: init,
              component: component
            }))
          };
          var wrapNavBar = drawer || tabs && !navigator && !renderer || wrap;

          if (wrap === false || commonProps.wrap === false) {
            wrapNavBar = false;
          }

          if (component && wrapNavBar) {
            res[key] = {
              screen: _this2.processScene({
                key: key,
                props: {
                  children: {
                    key: "_" + key,
                    props: _extends({}, _child.props, {
                      wrap: false
                    })
                  }
                }
              }, commonProps, clones, wrapBy),
              navigationOptions: createNavigationOptions(_extends({}, commonProps, _child.props, {
                hideNavBar: true
              }))
            };
          } else {
            res[key] = screen;
          }

          props.init = true;

          if (!_this2[key]) {
            _this2[key] = new Function('actions', 'props', 'type', "return function " + key.replace(/\W/g, '_') + "(params){ actions.execute(type, '" + key + "', props, params)}")(_this2, _extends({
              error: ''
            }, commonProps, props), type);
          }

          if ((onEnter || on || component && component.onEnter) && !_this2[key + _Util.OnEnter]) {
            _this2[key + _Util.OnEnter] = onEnter || on || component.onEnter;
          }

          if ((onExit || component && component.onExit) && !_this2[key + _Util.OnExit]) {
            _this2[key + _Util.OnExit] = onExit || component.onExit;
          }

          order.push(key);

          if (initial || _child.props.initial || !initialRouteName) {
            initialRouteName = key;
            initialRouteParams = _extends({}, commonProps, props);
          }
        };

        for (var _iterator6 = children, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {
          var _ref10;

          if (_isArray6) {
            if (_i7 >= _iterator6.length) break;
            _ref10 = _iterator6[_i7++];
          } else {
            _i7 = _iterator6.next();
            if (_i7.done) break;
            _ref10 = _i7.value;
          }

          var _child = _ref10;

          var _ret2 = _loop2(_child);

          if (_ret2 === "continue") continue;
        }

        var mode = modal ? 'modal' : 'card';

        var navigationConfig = _extends({
          lazy: lazy,
          initialRouteName: initialRouteName,
          initialRouteParams: initialRouteParams,
          contentComponent: contentComponent,
          order: order
        }, commonProps, {
          navigationOptions: createNavigationOptions(commonProps)
        });

        if (navigator) {
          return navigator(res, navigationConfig);
        }

        if (renderer) {
          return tabs ? (0, _createTabNavigatorHOC2.default)(renderer)(res, navigationConfig) : (0, _createStackNavigatorHOC2.default)(renderer)(res, navigationConfig);
        }

        if (lightbox) {
          return (0, _createStackNavigatorHOC2.default)(_LightboxRenderer2.default)(res, _extends({
            mode: mode,
            initialRouteParams: initialRouteParams,
            initialRouteName: initialRouteName
          }, commonProps, {
            navigationOptions: createNavigationOptions(commonProps)
          }));
        }

        if (tabs) {
          var createTabNavigator = _reactNavigation.createMaterialTopTabNavigator;

          if (legacy) {
            createTabNavigator = _reactNavigationDeprecatedTabNavigator.createTabNavigator;

            if (!tabBarComponent) {
              tabBarComponent = tabBarPosition === 'top' ? function (props) {
                return _react3.default.createElement(_reactNavigationDeprecatedTabNavigator.TabBarTop, _extends({}, props, commonProps, {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 827
                  }
                }));
              } : function (props) {
                return _react3.default.createElement(_reactNavigationDeprecatedTabNavigator.TabBarBottom, _extends({}, props, commonProps, {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 827
                  }
                }));
              };
            }
          } else if (tabBarPosition !== 'top') {
            createTabNavigator = _reactNavigation.createBottomTabNavigator;
          }

          return createTabNavigator(res, _extends({
            lazy: lazy,
            tabBarComponent: tabBarComponent,
            initialRouteName: initialRouteName,
            initialRouteParams: initialRouteParams,
            order: order
          }, commonProps, {
            tabBarOptions: createTabBarOptions(commonProps),
            navigationOptions: createNavigationOptions(commonProps)
          }));
        }

        if (drawer) {
          var config = _extends({
            initialRouteName: initialRouteName,
            contentComponent: contentComponent,
            order: order,
            drawerOpenRoute: 'DrawerOpen',
            drawerCloseRoute: 'DrawerClose',
            drawerToggleRoute: 'DrawerToggle'
          }, commonProps);

          if (drawerWidth) {
            config.drawerWidth = drawerWidth;
          }

          if (drawerLockMode) {
            config.drawerLockMode = drawerLockMode;
          }

          return (0, _reactNavigation.createDrawerNavigator)(res, config);
        }

        if (overlay) {
          return (0, _createTabNavigatorHOC2.default)(_OverlayRenderer2.default)(res, _extends({
            lazy: lazy,
            initialRouteName: initialRouteName,
            contentComponent: contentComponent,
            initialRouteParams: initialRouteParams,
            order: order
          }, commonProps, {
            tabBarOptions: createTabBarOptions(commonProps),
            navigationOptions: createNavigationOptions(commonProps)
          }));
        }

        return (0, _reactNavigation.createStackNavigator)(res, _extends({
          mode: mode,
          initialRouteParams: initialRouteParams,
          initialRouteName: initialRouteName
        }, commonProps, {
          transitionConfig: transitionConfig,
          navigationOptions: createNavigationOptions(commonProps)
        }));
      };

      this.dispatch = function (action) {
        if (_this2.externalDispatch) {
          _this2.externalAction = action;

          _this2.externalDispatch(action);
        } else if (_this2._navigator) {
          _this2._navigator.dispatch(action);
        }
      };

      this.execute = function (actionType, routeName) {
        for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          params[_key - 2] = arguments[_key];
        }

        var res = uniteParams(routeName, params);
        var overridenType = res.type || actionType;
        var type = actionMap[overridenType] || overridenType;

        if (type === 'pop') {
          _this2[type](res);
        } else {
          _this2[type](routeName, res);
        }
      };

      this.push = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: _reactNavigation.StackActions.PUSH,
          routeName: routeName,
          params: params
        });
      };

      this.jump = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: _reactNavigation.NavigationActions.NAVIGATE,
          routeName: routeName,
          params: params
        });
      };

      this.drawerOpen = function () {
        _this2.dispatch(_reactNavigation.DrawerActions.openDrawer());
      };

      this.drawerClose = function () {
        _this2.dispatch(_reactNavigation.DrawerActions.closeDrawer());
      };

      this.drawerToggle = function () {
        _this2.dispatch(_reactNavigation.DrawerActions.toggleDrawer());
      };

      this.refresh = function (data) {
        var sceneKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var params = filterParam(data);

        var _getActiveState = (0, _State.getActiveState)(_this2.state),
            key = _getActiveState.key;

        _this2.dispatch(_reactNavigation.NavigationActions.setParams({
          key: sceneKey || key,
          params: params
        }));
      };

      this.pop = function () {
        var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            timeout = _ref12.timeout,
            key = _ref12.key,
            params = _objectWithoutProperties(_ref12, ["timeout", "key"]);

        var res = filterParam(params);

        if (timeout) {
          setTimeout(function () {
            return _this2.pop(params);
          }, timeout);
        } else {
          _this2.dispatch(_reactNavigation.NavigationActions.back({
            key: key
          }));

          if (res.refresh) {
            _this2.refresh(res.refresh);
          }
        }

        return true;
      };

      this.popTo = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.POP_TO,
          routeName: routeName,
          params: params
        });
      };

      this.popAndPush = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.POP_AND_PUSH,
          routeName: routeName,
          params: params
        });
      };

      this.replace = function (routeName, data) {
        var params = filterParam(data);

        _this2.dispatch({
          type: ActionConst.REPLACE,
          routeName: routeName,
          params: params
        });
      };

      this.reset = function (routeName, data) {
        var params = filterParam(data);
        var parent = (0, _State.getParent)(_this2.state, routeName);

        _this2.dispatch(_reactNavigation.StackActions.reset({
          index: 0,
          key: parent ? parent.key : null,
          actions: [_reactNavigation.NavigationActions.navigate({
            routeName: routeName,
            params: params
          })]
        }));
      };
    }

    _createClass(NavigationStore, [{
      key: "externalState",
      set: function set(state) {
        if (state && this.externalDispatch) {
          this.onNavigationStateChange(this.state, state, this.externalAction);
          this.state = state;
        }
      }
    }]);

    return NavigationStore;
  }();

  exports.default = new NavigationStore();
});