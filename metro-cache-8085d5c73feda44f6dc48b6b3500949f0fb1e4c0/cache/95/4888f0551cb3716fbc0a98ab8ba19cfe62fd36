__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _jsxFileName = "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-settings-components/src/switch/switch.js";

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        SettingsSwitch: {
            displayName: "SettingsSwitch"
        }
    };

    var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/nishon/ReactNativeProject/buildchange-ph/node_modules/react-native-settings-components/src/switch/switch.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _reactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var SettingsSwitch = _wrapComponent("SettingsSwitch")((_temp = _class = function (_Component) {
        _inherits(SettingsSwitch, _Component);

        function SettingsSwitch() {
            _classCallCheck(this, SettingsSwitch);

            var _this = _possibleConstructorReturn(this, (SettingsSwitch.__proto__ || Object.getPrototypeOf(SettingsSwitch)).call(this));

            _this.state = {
                isInEditMode: false
            };
            return _this;
        }

        _createClass(SettingsSwitch, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    container = _props.container,
                    containerStyle = _props.containerStyle,
                    titleProps = _props.titleProps,
                    titleStyle = _props.titleStyle,
                    title = _props.title,
                    disabled = _props.disabled,
                    switchProps = _props.switchProps,
                    disabledOverlayStyle = _props.disabledOverlayStyle,
                    switchWrapperProps = _props.switchWrapperProps,
                    switchWrapperStyle = _props.switchWrapperStyle,
                    value = _props.value,
                    thumbTintColor = _props.thumbTintColor,
                    onTintColor = _props.onTintColor,
                    onSaveValue = _props.onSaveValue;
                return _react3.default.createElement(
                    _reactNative.View,
                    _extends({}, container, {
                        style: [styles.defaultContainerStyle, containerStyle],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 50
                        }
                    }),
                    _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flex: 1,
                                position: 'relative'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 51
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            _extends({}, titleProps, {
                                style: [styles.defaultTitleStyle, titleStyle],
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 52
                                }
                            }),
                            title
                        ),
                        disabled ? _react3.default.createElement(_reactNative.View, {
                            style: [{
                                position: "absolute",
                                top: 0,
                                right: 0,
                                bottom: 0,
                                left: 0
                            }, styles.defaultDisabledOverlayStyle, disabled ? disabledOverlayStyle : null],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 54
                            }
                        }) : null
                    ),
                    _react3.default.createElement(
                        _reactNative.View,
                        _extends({}, switchWrapperProps, {
                            style: [styles.defaultSwitchWrapperStyle, switchWrapperStyle],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 57
                            }
                        }),
                        _react3.default.createElement(_reactNative.Switch, _extends({
                            value: value,
                            thumbTintColor: thumbTintColor ? thumbTintColor : null,
                            onTintColor: onTintColor ? onTintColor : null,
                            onValueChange: function onValueChange(value) {
                                onSaveValue(value);
                            },
                            disabled: disabled
                        }, switchProps, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 59
                            }
                        }))
                    )
                );
            }
        }]);

        return SettingsSwitch;
    }(_react2.Component), _class.props = {
        container: _propTypes2.default.object,
        containerStyle: _reactNative.ViewPropTypes ? _reactNative.ViewPropTypes.style : _reactNative.View.propTypes.style,
        disabledOverlayStyle: _propTypes2.default.object,
        titleProps: _propTypes2.default.object,
        titleStyle: _reactNative.Text.propTypes.style,
        title: _propTypes2.default.string,
        switchWrapperProps: _propTypes2.default.object,
        switchWrapperStyle: _reactNative.ViewPropTypes ? _reactNative.ViewPropTypes.style : _reactNative.View.propTypes.style,
        value: _propTypes2.default.bool.isRequired,
        disabled: _propTypes2.default.bool,
        onSaveValue: _propTypes2.default.func.isRequired,
        thumbTintColor: _propTypes2.default.string,
        onTintColor: _propTypes2.default.string,
        switchProps: _propTypes2.default.object
    }, _class.defaultProps = {
        container: {},
        containerStyle: {},
        disabledOverlayStyle: {},
        titleProps: {},
        titleStyle: {},
        switchWrapperProps: {},
        switchWrapperStyle: {},
        disabled: false,
        switchProps: {}
    }, _temp));

    var styles = _reactNative.StyleSheet.create({
        defaultContainerStyle: {
            padding: 0,
            height: 50,
            backgroundColor: "white",
            alignItems: "center",
            flexDirection: "row"
        },
        defaultTitleStyle: {
            flex: 0,
            paddingLeft: 16,
            paddingRight: 8,
            fontSize: 16
        },
        defaultSwitchWrapperStyle: {
            flex: 0,
            flexDirection: "row",
            paddingLeft: 8,
            paddingRight: 16
        },
        defaultDisabledOverlayStyle: {
            backgroundColor: "rgba(255,255,255,0.6)"
        }
    });

    exports.default = SettingsSwitch;
});