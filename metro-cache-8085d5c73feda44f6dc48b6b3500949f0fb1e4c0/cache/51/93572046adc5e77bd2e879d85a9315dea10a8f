__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var _utils = _require(_dependencyMap[0], './utils');

    var utils = _interopRequireWildcard(_utils);

    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};

            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                }
            }

            newObj.default = obj;
            return newObj;
        }
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var placeholderRegex = /(\{[\d|\w]+\})/;

    var LocalizedStrings = function () {
        _createClass(LocalizedStrings, [{
            key: '_getBestMatchingLanguage',
            value: function _getBestMatchingLanguage(language, props) {
                if (props[language]) return language;
                var idx = language.indexOf('-');
                var auxLang = idx >= 0 ? language.substring(0, idx) : language;
                return props[auxLang] ? auxLang : Object.keys(props)[0];
            }
        }]);

        function LocalizedStrings(props, getInterfaceLanguageCallback) {
            _classCallCheck(this, LocalizedStrings);

            if (getInterfaceLanguageCallback) {
                this._interfaceLanguage = getInterfaceLanguageCallback();
            } else {
                this._interfaceLanguage = utils.getInterfaceLanguage();
            }

            this._language = this._interfaceLanguage;
            this.setContent(props);
        }

        _createClass(LocalizedStrings, [{
            key: 'setContent',
            value: function setContent(props) {
                this._defaultLanguage = Object.keys(props)[0];
                this._defaultLanguageFirstLevelKeys = [];
                this._props = props;
                utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage]));

                for (var key in this._props[this._defaultLanguage]) {
                    if (typeof this._props[this._defaultLanguage][key] == "string") {
                        this._defaultLanguageFirstLevelKeys.push(key);
                    }
                }

                this.setLanguage(this._interfaceLanguage);
            }
        }, {
            key: 'setLanguage',
            value: function setLanguage(language) {
                var bestLanguage = this._getBestMatchingLanguage(language, this._props);

                var defaultLanguage = Object.keys(this._props)[0];
                this._language = bestLanguage;

                if (this._props[bestLanguage]) {
                    for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i++) {
                        delete this[this._defaultLanguageFirstLevelKeys[i]];
                    }

                    var localizedStrings = _extends({}, this._props[this._language]);

                    for (var key in localizedStrings) {
                        if (localizedStrings.hasOwnProperty(key)) {
                            this[key] = localizedStrings[key];
                        }
                    }

                    if (defaultLanguage !== this._language) {
                        localizedStrings = this._props[defaultLanguage];

                        this._fallbackValues(localizedStrings, this);
                    }
                }
            }
        }, {
            key: '_fallbackValues',
            value: function _fallbackValues(defaultStrings, strings) {
                for (var key in defaultStrings) {
                    if (defaultStrings.hasOwnProperty(key) && !strings[key] && strings[key] !== '') {
                        strings[key] = defaultStrings[key];
                        console.log("\uD83D\uDEA7 \uD83D\uDC77 key '" + key + '\' not found in localizedStrings for language ' + this._language + " \uD83D\uDEA7");
                    } else {
                        if (typeof strings[key] != "string") {
                            this._fallbackValues(defaultStrings[key], strings[key]);
                        }
                    }
                }
            }
        }, {
            key: 'getLanguage',
            value: function getLanguage() {
                return this._language;
            }
        }, {
            key: 'getInterfaceLanguage',
            value: function getInterfaceLanguage() {
                return this._interfaceLanguage;
            }
        }, {
            key: 'getAvailableLanguages',
            value: function getAvailableLanguages() {
                if (!this._availableLanguages) {
                    this._availableLanguages = [];

                    for (var language in this._props) {
                        this._availableLanguages.push(language);
                    }
                }

                return this._availableLanguages;
            }
        }, {
            key: 'formatString',
            value: function formatString(str) {
                for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    valuesForPlaceholders[_key - 1] = arguments[_key];
                }

                return (str || '').split(placeholderRegex).filter(function (textPart) {
                    return !!textPart;
                }).map(function (textPart, index) {
                    if (textPart.match(placeholderRegex)) {
                        var matchedKey = textPart.slice(1, -1);
                        var valueForPlaceholder = valuesForPlaceholders[matchedKey];

                        if (valueForPlaceholder == undefined) {
                            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];

                            if (valueFromObjectPlaceholder !== undefined) {
                                valueForPlaceholder = valueFromObjectPlaceholder;
                            } else {
                                return valueForPlaceholder;
                            }
                        }

                        return valueForPlaceholder;
                    }

                    return textPart;
                }).join('');
            }
        }, {
            key: 'getString',
            value: function getString(key, language) {
                try {
                    return this._props[language][key];
                } catch (ex) {
                    console.log("No localization found for key " + key + " and language " + language);
                }

                return null;
            }
        }, {
            key: 'getContent',
            value: function getContent() {
                return this._props;
            }
        }]);

        return LocalizedStrings;
    }();

    exports.default = LocalizedStrings;
});